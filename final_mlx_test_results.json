{
  "total_files": 106,
  "passed": 18,
  "failed": 0,
  "skipped": 88,
  "detailed_results": {
    "delta_net_adaptive_hier_gate_mlx.py": {
      "file_name": "delta_net_adaptive_hier_gate_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "_DepthwiseMultiScaleConv",
              "line": 109,
              "bases": [
                "<ast.Attribute object at 0x110e85030>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 168,
              "bases": [
                "<ast.Attribute object at 0x110e7e350>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 171,
              "args": [
                "self"
              ]
            },
            {
              "name": "_apply_short_conv",
              "line": 269,
              "args": [
                "self",
                "x",
                "conv",
                "kernel_size"
              ]
            },
            {
              "name": "__call__",
              "line": 283,
              "args": [
                "self",
                "hidden_states",
                "attention_mask"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 168,
            "methods": [
              {
                "name": "__init__",
                "line": 171,
                "args": [
                  "self"
                ]
              },
              {
                "name": "_apply_short_conv",
                "line": 269,
                "args": [
                  "self",
                  "x",
                  "conv",
                  "kernel_size"
                ]
              },
              {
                "name": "__call__",
                "line": 283,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "passed",
          "message": "No PyTorch remnants found"
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (70 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 39
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 7
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 2
            },
            {
              "pattern": "MLX module call method",
              "count": 2
            },
            {
              "pattern": "MLX array usage",
              "count": 20
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0003s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.00038108404260128736,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0002854160265997052,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.0002860140521079302,
              "std_time": 2.603749245811727e-05,
              "min_time": 0.0002500000409781933,
              "max_time": 0.0003106670919805765,
              "tokens_per_second": 55941.307366122855,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0005004580210273465,
              "std_time": 1.9710642577776165e-05,
              "min_time": 0.00047333305701613426,
              "max_time": 0.0005195830017328262,
              "tokens_per_second": 63941.42696386402,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "passed",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_cagf_rc_pf_mlx.py": {
      "file_name": "delta_net_cagf_rc_pf_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn",
            "numpy"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "_DepthwiseFIRConv1d",
              "line": 67,
              "bases": [
                "<ast.Attribute object at 0x110ebde40>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 217,
              "bases": [
                "<ast.Attribute object at 0x110e98b20>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 227,
              "bases": [
                "<ast.Attribute object at 0x110e99690>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 240,
              "bases": [
                "<ast.Attribute object at 0x110e9a530>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 283,
              "bases": [
                "<ast.Attribute object at 0x110e80160>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 286,
              "args": [
                "self"
              ]
            },
            {
              "name": "_per_head_stats",
              "line": 396,
              "args": [
                "x"
              ]
            },
            {
              "name": "__call__",
              "line": 406,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 283,
            "methods": [
              {
                "name": "__init__",
                "line": 286,
                "args": [
                  "self"
                ]
              },
              {
                "name": "_per_head_stats",
                "line": 396,
                "args": [
                  "x"
                ]
              },
              {
                "name": "__call__",
                "line": 406,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "passed",
          "message": "No PyTorch remnants found"
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (154 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 96
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 20
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 9
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 24
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0043s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0031232089968398213,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.005431750090792775,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.006420514041868349,
              "std_time": 0.0008438317204280215,
              "min_time": 0.005227542016655207,
              "max_time": 0.007043292047455907,
              "tokens_per_second": 2492.012305504444,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.013038999711473783,
              "std_time": 0.00040077644543230463,
              "min_time": 0.012492416077293456,
              "max_time": 0.01344216603320092,
              "tokens_per_second": 2454.17598804311,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "passed",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_msdfdm_mlx.py": {
      "file_name": "delta_net_msdfdm_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 84,
              "bases": [
                "<ast.Attribute object at 0x110e3d930>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 178,
              "bases": [
                "<ast.Attribute object at 0x110ea02b0>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 189,
              "bases": [
                "<ast.Attribute object at 0x110ea27a0>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 200,
              "bases": [
                "<ast.Attribute object at 0x110ea35b0>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 220,
              "bases": [
                "<ast.Attribute object at 0x110d7f5e0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 221,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 307,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 220,
            "methods": [
              {
                "name": "__init__",
                "line": 221,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 307,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (125 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 80
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 10
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 26
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0002s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00021725008264183998,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.0001801659818738699,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00020526399991164604,
              "std_time": 2.4381806734350563e-05,
              "min_time": 0.00017133296933025122,
              "max_time": 0.0002275420119985938,
              "tokens_per_second": 77948.39819396996,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0003163609653711319,
              "std_time": 1.6298920621969455e-05,
              "min_time": 0.00029333296697586775,
              "max_time": 0.0003287500003352761,
              "tokens_per_second": 101150.27927816538,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_phfg_mlx.py": {
      "file_name": "delta_net_phfg_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 84,
              "bases": [
                "<ast.Attribute object at 0x110ee6110>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 178,
              "bases": [
                "<ast.Attribute object at 0x110e178b0>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 189,
              "bases": [
                "<ast.Attribute object at 0x110ea0400>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 200,
              "bases": [
                "<ast.Attribute object at 0x110ea1420>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 220,
              "bases": [
                "<ast.Attribute object at 0x110ea3df0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 221,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 307,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 220,
            "methods": [
              {
                "name": "__init__",
                "line": 221,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 307,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (125 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 80
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 10
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 26
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0002s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.0001466670073568821,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00017662509344518185,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00019681965932250023,
              "std_time": 2.5037135134596253e-05,
              "min_time": 0.00016158400103449821,
              "max_time": 0.0002174580004066229,
              "tokens_per_second": 81292.69228021114,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.00031533332852025825,
              "std_time": 1.0241159814487093e-05,
              "min_time": 0.0003012079978361726,
              "max_time": 0.00032516696956008673,
              "tokens_per_second": 101479.91698233761,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_htfr_mlx.py": {
      "file_name": "delta_net_htfr_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 84,
              "bases": [
                "<ast.Attribute object at 0x110ed2b90>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 178,
              "bases": [
                "<ast.Attribute object at 0x110e99420>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 189,
              "bases": [
                "<ast.Attribute object at 0x110ea3850>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 200,
              "bases": [
                "<ast.Attribute object at 0x110ea15d0>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 220,
              "bases": [
                "<ast.Attribute object at 0x110ea3a30>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 221,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 307,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 220,
            "methods": [
              {
                "name": "__init__",
                "line": 221,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 307,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (125 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 80
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 10
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 26
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0002s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.0001427909592166543,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00017716700676828623,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00020833363911757866,
              "std_time": 3.211437839149406e-05,
              "min_time": 0.00016429193783551455,
              "max_time": 0.0002399589866399765,
              "tokens_per_second": 76799.88727586126,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0003321250357354681,
              "std_time": 3.754035120801157e-05,
              "min_time": 0.00029325007926672697,
              "max_time": 0.00038287497591227293,
              "tokens_per_second": 96349.25572273767,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_aft_mlx.py": {
      "file_name": "delta_net_aft_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "_DepthwiseFIRConv1d",
              "line": 144,
              "bases": [
                "<ast.Attribute object at 0x110ead030>"
              ]
            },
            {
              "name": "_ShortConvolution",
              "line": 181,
              "bases": [
                "<ast.Attribute object at 0x110f01780>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 242,
              "bases": [
                "<ast.Attribute object at 0x110ea14b0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 245,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_short_kernel",
                "fir_long_kernel",
                "fusion_hidden_mult",
                "fusion_include_path_outputs",
                "value_bias_init",
                "min_context_floor",
                "max_context_floor",
                "fusion_dropout"
              ]
            },
            {
              "name": "__call__",
              "line": 373,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 242,
            "methods": [
              {
                "name": "__init__",
                "line": 245,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_short_kernel",
                  "fir_long_kernel",
                  "fusion_hidden_mult",
                  "fusion_include_path_outputs",
                  "value_bias_init",
                  "min_context_floor",
                  "max_context_floor",
                  "fusion_dropout"
                ]
              },
              {
                "name": "__call__",
                "line": 373,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 80,
              "match": "einops",
              "context": "attern: str, **kwargs) -> mx.array:\n    \"\"\"Simple einops rearrange replacement for common patterns\"\"\""
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (83 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 51
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 6
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 2
            },
            {
              "pattern": "MLX module call method",
              "count": 3
            },
            {
              "pattern": "MLX array usage",
              "count": 21
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0001s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0001003750367090106,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 7.216609083116055e-05,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 7.926401061316331e-05,
              "std_time": 1.1053047555276083e-05,
              "min_time": 6.387499161064625e-05,
              "max_time": 8.933304343372583e-05,
              "tokens_per_second": 201857.05815575895,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 7.981931169827779e-05,
              "std_time": 2.732004142972772e-06,
              "min_time": 7.687497418373823e-05,
              "max_time": 8.345802780240774e-05,
              "tokens_per_second": 400905.48664416064,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_pathgated_mlx.py": {
      "file_name": "delta_net_pathgated_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 84,
              "bases": [
                "<ast.Attribute object at 0x110e3ddb0>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 173,
              "bases": [
                "<ast.Attribute object at 0x110eebc70>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 184,
              "bases": [
                "<ast.Attribute object at 0x110ea1a80>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 195,
              "bases": [
                "<ast.Attribute object at 0x110ea0640>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 215,
              "bases": [
                "<ast.Attribute object at 0x110ea1c90>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 216,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 302,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 215,
            "methods": [
              {
                "name": "__init__",
                "line": 216,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 302,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (117 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 72
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 10
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 26
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0003s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.0002749999985098839,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.0002635420532897115,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.0001760416974623998,
              "std_time": 2.4394798251100925e-05,
              "min_time": 0.00014195800758898258,
              "max_time": 0.00019770802464336157,
              "tokens_per_second": 90887.55806514187,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0003096526488661766,
              "std_time": 2.263277456647008e-06,
              "min_time": 0.0003077499568462372,
              "max_time": 0.00031283299904316664,
              "tokens_per_second": 103341.59942493992,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_dual_path_fusion_mlx.py": {
      "file_name": "delta_net_dual_path_fusion_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "ShortConvolution",
              "line": 120,
              "bases": [
                "<ast.Attribute object at 0x110e3cd90>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 228,
              "bases": [
                "<ast.Attribute object at 0x110f00730>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 231,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "use_dilated_conv",
                "dilated_kernel_size",
                "dilation",
                "use_mix_gate"
              ]
            },
            {
              "name": "__call__",
              "line": 354,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 228,
            "methods": [
              {
                "name": "__init__",
                "line": 231,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "use_dilated_conv",
                  "dilated_kernel_size",
                  "dilation",
                  "use_mix_gate"
                ]
              },
              {
                "name": "__call__",
                "line": 354,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 64,
              "match": "einops",
              "context": "----------------------------------------\n# Simple einops replacement functions\n# -------------------------"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (111 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 71
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 3
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 2
            },
            {
              "pattern": "MLX module call method",
              "count": 2
            },
            {
              "pattern": "MLX array usage",
              "count": 33
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0001s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 6.195902824401855e-05,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 5.7750032283365726e-05,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 7.011070071409146e-05,
              "std_time": 1.3725674550624083e-05,
              "min_time": 5.154102109372616e-05,
              "max_time": 8.429109584540129e-05,
              "tokens_per_second": 228210.52759474388,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 6.901399077226718e-05,
              "std_time": 5.578668972781462e-06,
              "min_time": 6.287498399615288e-05,
              "max_time": 7.637497037649155e-05,
              "tokens_per_second": 463674.09914887854,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_hsigctx_mlx.py": {
      "file_name": "delta_net_hsigctx_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "warning",
          "message": "All imports successful (with 8 unconverted imports)",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn",
            "fla.layers.utils",
            "fla.modules",
            "fla.modules.l2norm",
            "fla.models.utils"
          ],
          "warnings": [
            "Line 119: from fla.layers.utils import get_unpad_data",
            "Line 119: from fla.layers.utils import index_first_axis",
            "Line 119: from fla.layers.utils import pad_input",
            "Line 120: from fla.modules import FusedRMSNormGated",
            "Line 120: from fla.modules import RMSNorm",
            "Line 120: from fla.modules import ShortConvolution",
            "Line 121: from fla.modules.l2norm import l2norm",
            "Line 324: from fla.models.utils import Cache"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "_DepthwiseFIRConv1d",
              "line": 284,
              "bases": [
                "<ast.Attribute object at 0x110eb14e0>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 330,
              "bases": [
                "<ast.Attribute object at 0x110ea16c0>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 137,
              "bases": [
                "<ast.Attribute object at 0x110f036d0>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 148,
              "bases": [
                "<ast.Attribute object at 0x110ee3430>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 159,
              "bases": [
                "<ast.Attribute object at 0x110ee2bf0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 334,
              "args": [
                "self"
              ]
            },
            {
              "name": "__call__",
              "line": 430,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 330,
            "methods": [
              {
                "name": "__init__",
                "line": 334,
                "args": [
                  "self"
                ]
              },
              {
                "name": "__call__",
                "line": 430,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 7 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "torch\\.",
              "description": "PyTorch module usage",
              "line": 58,
              "match": "torch.",
              "context": "onverted from PyTorch to MLX framework\n- Replaced torch.nn with mlx.nn modules\n- Converted tensor operatio"
            },
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 49,
              "match": "einops",
              "context": "time; gating adds only **O(1)** per token.\n   \u2022 `einops.rearrange()` is used universally; no shape assump"
            },
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 72,
              "match": "einops",
              "context": "ef rearrange(x, pattern, **kwargs):\n    \"\"\"Simple einops.rearrange replacement for common patterns with ML"
            },
            {
              "pattern": "from fla",
              "description": "FLA module usage",
              "line": 119,
              "match": "from fla",
              "context": "al versions or skip complex dependencies\ntry:\n    from fla.layers.utils import get_unpad_data, index_first_a"
            },
            {
              "pattern": "from fla",
              "description": "FLA module usage",
              "line": 120,
              "match": "from fla",
              "context": "t get_unpad_data, index_first_axis, pad_input\n    from fla.modules import FusedRMSNormGated, RMSNorm, ShortC"
            },
            {
              "pattern": "from fla",
              "description": "FLA module usage",
              "line": 121,
              "match": "from fla",
              "context": "FusedRMSNormGated, RMSNorm, ShortConvolution\n    from fla.modules.l2norm import l2norm\nexcept ImportError:"
            },
            {
              "pattern": "from fla",
              "description": "FLA module usage",
              "line": 324,
              "match": "from fla",
              "context": "-------\nif TYPE_CHECKING:  # pragma: no cover\n    from fla.models.utils import Cache  # noqa: F401 \u2013 runtime"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (103 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 74
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 8
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 3
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 13
            }
          ]
        },
        "instantiation": {
          "status": "skipped",
          "reason": "imports_failed"
        },
        "forward_pass": {
          "status": "skipped",
          "reason": "imports_failed"
        },
        "shape_compatibility": {
          "status": "skipped",
          "reason": "imports_failed"
        },
        "parameter_analysis": {
          "status": "skipped",
          "reason": "imports_failed"
        },
        "performance": {
          "status": "skipped",
          "reason": "imports_failed"
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_cagf_mf_mlx.py": {
      "file_name": "delta_net_cagf_mf_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn",
            "typing"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "FusedRMSNormGated",
              "line": 88,
              "bases": [
                "<ast.Attribute object at 0x110e9b430>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 103,
              "bases": [
                "<ast.Attribute object at 0x110e9a4d0>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 114,
              "bases": [
                "<ast.Attribute object at 0x110e998a0>"
              ]
            },
            {
              "name": "_DepthwiseFIRConv1d",
              "line": 160,
              "bases": [
                "<ast.Attribute object at 0x110f08190>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 279,
              "bases": [
                "<ast.Attribute object at 0x110ea1510>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 282,
              "args": [
                "self"
              ]
            },
            {
              "name": "_per_head_stats",
              "line": 393,
              "args": [
                "x"
              ]
            },
            {
              "name": "__call__",
              "line": 403,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 279,
            "methods": [
              {
                "name": "__init__",
                "line": 282,
                "args": [
                  "self"
                ]
              },
              {
                "name": "_per_head_stats",
                "line": 393,
                "args": [
                  "x"
                ]
              },
              {
                "name": "__call__",
                "line": 403,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 29,
              "match": "einops",
              "context": "ort mlx.core as mx\nimport mlx.nn as nn\n\n# Replace einops with basic MLX reshape operations\ndef rearrange(x"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (124 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 70
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 13
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 8
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 28
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0001s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.000149125000461936,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.00010083301458507776,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00011800035523871581,
              "std_time": 1.8051499121524893e-05,
              "min_time": 9.31670656427741e-05,
              "max_time": 0.00013554200995713472,
              "tokens_per_second": 135592.81213714866,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.00011920835822820663,
              "std_time": 3.3542635964805954e-06,
              "min_time": 0.00011479202657938004,
              "max_time": 0.00012291606981307268,
              "tokens_per_second": 268437.5531683841,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_ms_adaptive_gstat3_mlx.py": {
      "file_name": "delta_net_ms_adaptive_gstat3_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 210,
              "bases": [
                "<ast.Attribute object at 0x110edafb0>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 237,
              "bases": [
                "<ast.Attribute object at 0x110ea1870>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 263,
              "bases": [
                "<ast.Attribute object at 0x110ea1540>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 273,
              "bases": [
                "<ast.Attribute object at 0x110d7fc10>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 287,
              "bases": [
                "<ast.Attribute object at 0x1017dd300>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 290,
              "args": [
                "self"
              ]
            },
            {
              "name": "__call__",
              "line": 404,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 287,
            "methods": [
              {
                "name": "__init__",
                "line": 290,
                "args": [
                  "self"
                ]
              },
              {
                "name": "__call__",
                "line": 404,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 2 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 28,
              "match": "einops",
              "context": "**Robust Implementation:**\n   - Universal use of einops.rearrange, batch-size agnostic, chunked computati"
            },
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 54,
              "match": "einops",
              "context": "nn as nn\n# Using native MLX operations instead of einops for compatibility\n\ndef rearrange_for_mlx(x, patte"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (181 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 119
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 32
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 6
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 19
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0006s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.0006179580232128501,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.0006394170923158526,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.0007206803032507499,
              "std_time": 9.15780505441754e-05,
              "min_time": 0.0005916659720242023,
              "max_time": 0.0007949999999254942,
              "tokens_per_second": 22201.24502893905,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0010698889770234625,
              "std_time": 5.837880138366094e-05,
              "min_time": 0.000987333944067359,
              "max_time": 0.0011119580594822764,
              "tokens_per_second": 29909.64547464278,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_triscale_mlx.py": {
      "file_name": "delta_net_triscale_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 84,
              "bases": [
                "<ast.Attribute object at 0x110ec2bc0>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 173,
              "bases": [
                "<ast.Attribute object at 0x110eab820>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 184,
              "bases": [
                "<ast.Attribute object at 0x110ea2cb0>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 195,
              "bases": [
                "<ast.Attribute object at 0x110ea1b10>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 215,
              "bases": [
                "<ast.Attribute object at 0x110ea10c0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 216,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 302,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 215,
            "methods": [
              {
                "name": "__init__",
                "line": 216,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 302,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (117 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 72
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 10
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 26
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0003s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.0002813340397551656,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00030845904257148504,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00018145799792061249,
              "std_time": 2.428500109776281e-05,
              "min_time": 0.0001474160235375166,
              "max_time": 0.00020241597667336464,
              "tokens_per_second": 88174.67503967485,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.000315653004993995,
              "std_time": 2.5078943348437353e-05,
              "min_time": 0.00028533407021313906,
              "max_time": 0.00034674990456551313,
              "tokens_per_second": 101377.1435523282,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_cagf_mlx.py": {
      "file_name": "delta_net_cagf_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 56,
              "bases": [
                "<ast.Attribute object at 0x110e62f20>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 199,
              "bases": [
                "<ast.Attribute object at 0x110e953c0>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 211,
              "bases": [
                "<ast.Attribute object at 0x110e94850>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 227,
              "bases": [
                "<ast.Attribute object at 0x110f03b20>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 273,
              "bases": [
                "<ast.Attribute object at 0x110f01480>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 276,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult",
                "gate_bias_init",
                "gate_logit_init"
              ]
            },
            {
              "name": "_per_head_stats",
              "line": 390,
              "args": [
                "x"
              ]
            },
            {
              "name": "__call__",
              "line": 402,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 273,
            "methods": [
              {
                "name": "__init__",
                "line": 276,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult",
                  "gate_bias_init",
                  "gate_logit_init"
                ]
              },
              {
                "name": "_per_head_stats",
                "line": 390,
                "args": [
                  "x"
                ]
              },
              {
                "name": "__call__",
                "line": 402,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "passed",
          "message": "No PyTorch remnants found"
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (141 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 82
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 19
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 8
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 27
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0005s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.000545875052921474,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0005186249036341906,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.0006399860139936209,
              "std_time": 8.284634960974899e-05,
              "min_time": 0.0005488749593496323,
              "max_time": 0.0007493330631405115,
              "tokens_per_second": 25000.546340313434,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0009763750325267514,
              "std_time": 7.375502857262398e-05,
              "min_time": 0.0008726660162210464,
              "max_time": 0.0010378750739619136,
              "tokens_per_second": 32774.291572355665,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "passed",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_ms_gstat3_quota_mlx.py": {
      "file_name": "delta_net_ms_gstat3_quota_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 84,
              "bases": [
                "<ast.Attribute object at 0x110edac50>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 181,
              "bases": [
                "<ast.Attribute object at 0x110f1ae90>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 192,
              "bases": [
                "<ast.Attribute object at 0x110ea1090>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 203,
              "bases": [
                "<ast.Attribute object at 0x110ea1c30>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 223,
              "bases": [
                "<ast.Attribute object at 0x110d7fc70>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 224,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 310,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 223,
            "methods": [
              {
                "name": "__init__",
                "line": 224,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 310,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (122 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 76
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 11
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 26
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0022s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 1,
              "forward_time": 0.0015672910958528519,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 1,
              "forward_time": 0.002911499934270978,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.007073611331482728,
              "std_time": 0.0011297486185666593,
              "min_time": 0.005475917016156018,
              "max_time": 0.007877708994783461,
              "tokens_per_second": 2261.928066189944,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.014848777636264762,
              "std_time": 0.0015244793612846548,
              "min_time": 0.012747291009873152,
              "max_time": 0.01631649991031736,
              "tokens_per_second": 2155.059546574883,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_hafmg_mlx.py": {
      "file_name": "delta_net_hafmg_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 84,
              "bases": [
                "<ast.Attribute object at 0x110e72c50>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 181,
              "bases": [
                "<ast.Attribute object at 0x110ef2e90>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 192,
              "bases": [
                "<ast.Attribute object at 0x110ea3610>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 203,
              "bases": [
                "<ast.Attribute object at 0x110ea3460>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 223,
              "bases": [
                "<ast.Attribute object at 0x110d7fdf0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 224,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 310,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 223,
            "methods": [
              {
                "name": "__init__",
                "line": 224,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 310,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (122 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 76
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 11
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 26
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0022s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.001543333986774087,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.002890750067308545,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.006933930989665289,
              "std_time": 0.0009447546547233934,
              "min_time": 0.0056077089393511415,
              "max_time": 0.007737374980933964,
              "tokens_per_second": 2307.4934007631855,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.014096999967781207,
              "std_time": 0.0009104308359716784,
              "min_time": 0.012809457955881953,
              "max_time": 0.014742541941814125,
              "tokens_per_second": 2269.9865271430963,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_csm_mlx.py": {
      "file_name": "delta_net_csm_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 148,
              "bases": [
                "<ast.Attribute object at 0x110ebeaa0>"
              ]
            },
            {
              "name": "ContentSharpGate",
              "line": 179,
              "bases": [
                "<ast.Attribute object at 0x110ebce50>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 222,
              "bases": [
                "<ast.Attribute object at 0x110ea1000>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 233,
              "bases": [
                "<ast.Attribute object at 0x110ea2200>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 244,
              "bases": [
                "<ast.Attribute object at 0x110ea3100>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 264,
              "bases": [
                "<ast.Attribute object at 0x110ec0d90>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 267,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult",
                "entropy_reg_alpha",
                "entropy_reg_start",
                "entropy_reg_end"
              ]
            },
            {
              "name": "_compute_path_stats",
              "line": 361,
              "args": [
                "self",
                "x"
              ]
            },
            {
              "name": "__call__",
              "line": 370,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 264,
            "methods": [
              {
                "name": "__init__",
                "line": 267,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult",
                  "entropy_reg_alpha",
                  "entropy_reg_start",
                  "entropy_reg_end"
                ]
              },
              {
                "name": "_compute_path_stats",
                "line": 361,
                "args": [
                  "self",
                  "x"
                ]
              },
              {
                "name": "__call__",
                "line": 370,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 13,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (134 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 78
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 13
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 6
            },
            {
              "pattern": "MLX module call method",
              "count": 6
            },
            {
              "pattern": "MLX array usage",
              "count": 31
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0003s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00027266598772257566,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.0002685420913621783,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00018740297916034857,
              "std_time": 2.071036869899871e-05,
              "min_time": 0.00015829200856387615,
              "max_time": 0.00020474998746067286,
              "tokens_per_second": 85377.51145519323,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0002975690100962917,
              "std_time": 1.3618479003193898e-05,
              "min_time": 0.00027895800303667784,
              "max_time": 0.00031116604804992676,
              "tokens_per_second": 107538.07995545294,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_bscgf_mlx.py": {
      "file_name": "delta_net_bscgf_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn",
            "typing"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "RMSNorm",
              "line": 96,
              "bases": [
                "<ast.Attribute object at 0x110f0dd50>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 107,
              "bases": [
                "<ast.Attribute object at 0x110f0d270>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 121,
              "bases": [
                "<ast.Attribute object at 0x110f0c4f0>"
              ]
            },
            {
              "name": "DepthwiseFIRConv1d",
              "line": 195,
              "bases": [
                "<ast.Attribute object at 0x110ecce80>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 300,
              "bases": [
                "<ast.Attribute object at 0x110ea2410>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 303,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_short_kernel",
                "fir_long_kernel",
                "fusion_hidden_mult",
                "fusion_value_bias",
                "gate_temp_init",
                "gate_entropy_reg"
              ]
            },
            {
              "name": "__call__",
              "line": 414,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 300,
            "methods": [
              {
                "name": "__init__",
                "line": 303,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_short_kernel",
                  "fir_long_kernel",
                  "fusion_hidden_mult",
                  "fusion_value_bias",
                  "gate_temp_init",
                  "gate_entropy_reg"
                ]
              },
              {
                "name": "__call__",
                "line": 414,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 2 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 13,
              "match": "einops",
              "context": "**: All computations chunked appropriately, using einops.rearrange exclusively for shape management; batch"
            },
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 27,
              "match": "einops",
              "context": "ef rearrange(x, pattern, **kwargs):\n    \"\"\"Simple einops rearrange replacement for common patterns\"\"\""
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (81 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 56
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 11
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 5
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 4
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0005s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0005216250428929925,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0005162920570001006,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.0005902083357796073,
              "std_time": 7.048170658839765e-05,
              "min_time": 0.0004905419191345572,
              "max_time": 0.0006412500515580177,
              "tokens_per_second": 27109.07154312819,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0006373610037068526,
              "std_time": 6.55625527260192e-06,
              "min_time": 0.0006319170352071524,
              "max_time": 0.0006465829210355878,
              "tokens_per_second": 50207.02523984047,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_efagm_mlx.py": {
      "file_name": "delta_net_efagm_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "_DepthwiseFIRConv1d",
              "line": 179,
              "bases": [
                "<ast.Attribute object at 0x110e945e0>"
              ]
            },
            {
              "name": "_ShortConvolution",
              "line": 216,
              "bases": [
                "<ast.Attribute object at 0x110e94d60>"
              ]
            },
            {
              "name": "_RMSNorm",
              "line": 243,
              "bases": [
                "<ast.Attribute object at 0x110eb6080>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 258,
              "bases": [
                "<ast.Attribute object at 0x110eb5660>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 260,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_short_kernel",
                "fir_long_kernel",
                "fusion_hidden_mult",
                "fusion_dropout",
                "entropy_floor_init",
                "entropy_floor_final",
                "entropy_floor_decay",
                "fusion_temp_init",
                "id_scale_init"
              ]
            },
            {
              "name": "get_entropy_floor",
              "line": 368,
              "args": [
                "self",
                "step"
              ]
            },
            {
              "name": "__call__",
              "line": 385,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 258,
            "methods": [
              {
                "name": "__init__",
                "line": 260,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_short_kernel",
                  "fir_long_kernel",
                  "fusion_hidden_mult",
                  "fusion_dropout",
                  "entropy_floor_init",
                  "entropy_floor_final",
                  "entropy_floor_decay",
                  "fusion_temp_init",
                  "id_scale_init"
                ]
              },
              {
                "name": "get_entropy_floor",
                "line": 368,
                "args": [
                  "self",
                  "step"
                ]
              },
              {
                "name": "__call__",
                "line": 385,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 2 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 11,
              "match": "einops",
              "context": "ull Dynamic Shapes**: All reshapes and mixing use einops.rearrange/tensor.shape, preserving compatibility"
            },
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 52,
              "match": "einops",
              "context": "f _rearrange(x, pattern, **kwargs):\n    \"\"\"Simple einops rearrange replacement for common patterns\"\"\""
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (91 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 63
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 11
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 8
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0025s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0018970839446410537,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.003197208046913147,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00253168031728516,
              "std_time": 2.178694554453843e-05,
              "min_time": 0.0025075420271605253,
              "max_time": 0.0025603329995647073,
              "tokens_per_second": 6319.913257119901,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.002487277650895218,
              "std_time": 1.774140770305779e-05,
              "min_time": 0.002463791985064745,
              "max_time": 0.0025066660018637776,
              "tokens_per_second": 12865.4716084803,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_mor_mlx.py": {
      "file_name": "delta_net_mor_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "warning",
          "message": "All imports successful (with 1 unconverted imports)",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn",
            "transformers.processing_utils",
            "fla.models.utils"
          ],
          "warnings": [
            "Line 246: from fla.models.utils import Cache"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "RMSNorm",
              "line": 111,
              "bases": [
                "<ast.Attribute object at 0x110ec7c70>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 123,
              "bases": [
                "<ast.Attribute object at 0x110ec6fb0>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 138,
              "bases": [
                "<ast.Attribute object at 0x110ec5fc0>"
              ]
            },
            {
              "name": "_DepthwiseCausalConv1d",
              "line": 216,
              "bases": [
                "<ast.Attribute object at 0x110e6a740>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 252,
              "bases": [
                "<ast.Attribute object at 0x110f0a860>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 255,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "local_kernel_size",
                "mid_kernel_size",
                "router_hidden_mult",
                "router_identity_bias",
                "stats_weight_init"
              ]
            },
            {
              "name": "__call__",
              "line": 356,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 252,
            "methods": [
              {
                "name": "__init__",
                "line": 255,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "local_kernel_size",
                  "mid_kernel_size",
                  "router_hidden_mult",
                  "router_identity_bias",
                  "stats_weight_init"
                ]
              },
              {
                "name": "__call__",
                "line": 356,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 3 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 42,
              "match": "einops",
              "context": ".nn as nn\n# Manual rearrange functions to replace einops\ndef rearrange(tensor: mx.array, pattern: str, **k"
            },
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 44,
              "match": "einops",
              "context": "attern: str, **kwargs) -> mx.array:\n    \"\"\"Simple einops rearrange replacement for common patterns\"\"\""
            },
            {
              "pattern": "from fla",
              "description": "FLA module usage",
              "line": 246,
              "match": "from fla",
              "context": "m transformers.processing_utils import Unpack\n    from fla.models.utils import Cache\n\n# --------------------"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (109 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 59
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 9
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 32
            }
          ]
        },
        "instantiation": {
          "status": "skipped",
          "reason": "imports_failed"
        },
        "forward_pass": {
          "status": "skipped",
          "reason": "imports_failed"
        },
        "shape_compatibility": {
          "status": "skipped",
          "reason": "imports_failed"
        },
        "parameter_analysis": {
          "status": "skipped",
          "reason": "imports_failed"
        },
        "performance": {
          "status": "skipped",
          "reason": "imports_failed"
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_phsg5_mlx.py": {
      "file_name": "delta_net_phsg5_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 126,
              "bases": [
                "<ast.Attribute object at 0x110f16b60>"
              ]
            },
            {
              "name": "PerHeadGate",
              "line": 255,
              "bases": [
                "<ast.Attribute object at 0x110eb51e0>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 281,
              "bases": [
                "<ast.Attribute object at 0x110eb4340>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 291,
              "bases": [
                "<ast.Attribute object at 0x110ea2110>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 301,
              "bases": [
                "<ast.Attribute object at 0x110ea3340>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 335,
              "bases": [
                "<ast.Attribute object at 0x1017ddae0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 338,
              "args": [
                "self"
              ]
            },
            {
              "name": "_apply_temperature_and_floor",
              "line": 431,
              "args": [
                "self",
                "logits"
              ]
            },
            {
              "name": "__call__",
              "line": 444,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 335,
            "methods": [
              {
                "name": "__init__",
                "line": 338,
                "args": [
                  "self"
                ]
              },
              {
                "name": "_apply_temperature_and_floor",
                "line": 431,
                "args": [
                  "self",
                  "logits"
                ]
              },
              {
                "name": "__call__",
                "line": 444,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 2 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 47,
              "match": "einops",
              "context": "x.nn as nn\n\n# Manual reshape functions to replace einops\ndef rearrange(tensor, pattern, **kwargs):\n    \"\"\""
            },
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 49,
              "match": "einops",
              "context": "arrange(tensor, pattern, **kwargs):\n    \"\"\"Simple einops replacement for common patterns\"\"\"\n    if \"b l (h"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (120 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 73
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 10
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 6
            },
            {
              "pattern": "MLX array usage",
              "count": 27
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0035s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0024211249547079206,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.004673333023674786,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.011107777322952947,
              "std_time": 0.001631751881137764,
              "min_time": 0.008801416028290987,
              "max_time": 0.012327624950557947,
              "tokens_per_second": 1440.4321886195753,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0242128613172099,
              "std_time": 0.0020475531636557033,
              "min_time": 0.021317207952961326,
              "max_time": 0.025670917006209493,
              "tokens_per_second": 1321.6116666581324,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_afrc_mlx.py": {
      "file_name": "delta_net_afrc_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 143,
              "bases": [
                "<ast.Attribute object at 0x110eaa410>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 183,
              "bases": [
                "<ast.Attribute object at 0x110ea8730>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 194,
              "bases": [
                "<ast.Attribute object at 0x110e8fb80>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 221,
              "bases": [
                "<ast.Attribute object at 0x110e8ccd0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 224,
              "args": [
                "self"
              ]
            },
            {
              "name": "__call__",
              "line": 344,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 221,
            "methods": [
              {
                "name": "__init__",
                "line": 224,
                "args": [
                  "self"
                ]
              },
              {
                "name": "__call__",
                "line": 344,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 3 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "torch\\.",
              "description": "PyTorch module usage",
              "line": 41,
              "match": "torch.",
              "context": ",\n`einops.rearrange` is used everywhere, and the @torch.compile kernel for\nchunk-wise \u0394-rule is preserved."
            },
            {
              "pattern": "@torch\\.compile",
              "description": "PyTorch compile decorator",
              "line": 41,
              "match": "@torch.compile",
              "context": "c,\n`einops.rearrange` is used everywhere, and the @torch.compile kernel for\nchunk-wise \u0394-rule is preserved.\n\"\"\"\nfr"
            },
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 41,
              "match": "einops",
              "context": "*O(N\u00b7d)**, strictly causal, batch-size agnostic,\n`einops.rearrange` is used everywhere, and the @torch.com"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (100 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 60
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 10
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 3
            },
            {
              "pattern": "MLX module call method",
              "count": 4
            },
            {
              "pattern": "MLX array usage",
              "count": 23
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0001s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.00011633406393229961,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 8.645898196846247e-05,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00010538931625584762,
              "std_time": 1.643503874668448e-05,
              "min_time": 8.26249597594142e-05,
              "max_time": 0.00012083398178219795,
              "tokens_per_second": 151818.04539995035,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.00011349997172753017,
              "std_time": 2.7061067303146535e-06,
              "min_time": 0.0001106249401345849,
              "max_time": 0.00011712498962879181,
              "tokens_per_second": 281938.3962210996,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_spectral_fusion_mlx.py": {
      "file_name": "delta_net_spectral_fusion_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn",
            "typing"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "_SpectralConv",
              "line": 117,
              "bases": [
                "<ast.Attribute object at 0x110e6a8c0>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 259,
              "bases": [
                "<ast.Attribute object at 0x110f0d7b0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 263,
              "args": [
                "self"
              ]
            },
            {
              "name": "__call__",
              "line": 324,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 259,
            "methods": [
              {
                "name": "__init__",
                "line": 263,
                "args": [
                  "self"
                ]
              },
              {
                "name": "__call__",
                "line": 324,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "passed",
          "message": "No PyTorch remnants found"
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (80 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 53
            },
            {
              "pattern": "MLX neural network usage",
              "count": 1
            },
            {
              "pattern": "MLX axis parameter",
              "count": 11
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 0
            },
            {
              "pattern": "MLX module call method",
              "count": 2
            },
            {
              "pattern": "MLX array usage",
              "count": 13
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0000s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 4.212500061839819e-05,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 2.5875051505863667e-05,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 2.704192108164231e-05,
              "std_time": 3.6072515119214293e-06,
              "min_time": 2.1958956494927406e-05,
              "max_time": 2.995890099555254e-05,
              "tokens_per_second": 591673.940312686,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 3.162495947132508e-05,
              "std_time": 2.3011291794964205e-06,
              "min_time": 2.8916983865201473e-05,
              "max_time": 3.454193938523531e-05,
              "tokens_per_second": 1011859.0042467874,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "passed",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_gae_ms3e_mlx.py": {
      "file_name": "delta_net_gae_ms3e_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 40,
              "bases": [
                "<ast.Attribute object at 0x110e94340>"
              ]
            },
            {
              "name": "HeadGroupedFusionGate",
              "line": 171,
              "bases": [
                "<ast.Attribute object at 0x110e61ae0>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 282,
              "bases": [
                "<ast.Attribute object at 0x110e792d0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 285,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_short_kernel",
                "fir_long_kernel",
                "fusion_hidden_mult",
                "fusion_dropout",
                "fusion_temp_init",
                "fusion_entropy_reg",
                "fusion_epsilon_floor",
                "fusion_eps_floor_learnable"
              ]
            },
            {
              "name": "_apply_conv1d",
              "line": 405,
              "args": [
                "self",
                "x",
                "weight",
                "bias"
              ]
            },
            {
              "name": "__call__",
              "line": 430,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 282,
            "methods": [
              {
                "name": "__init__",
                "line": 285,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_short_kernel",
                  "fir_long_kernel",
                  "fusion_hidden_mult",
                  "fusion_dropout",
                  "fusion_temp_init",
                  "fusion_entropy_reg",
                  "fusion_epsilon_floor",
                  "fusion_eps_floor_learnable"
                ]
              },
              {
                "name": "_apply_conv1d",
                "line": 405,
                "args": [
                  "self",
                  "x",
                  "weight",
                  "bias"
                ]
              },
              {
                "name": "__call__",
                "line": 430,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "passed",
          "message": "No PyTorch remnants found"
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (168 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 106
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 24
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 6
            },
            {
              "pattern": "MLX module call method",
              "count": 3
            },
            {
              "pattern": "MLX array usage",
              "count": 29
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0004s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0003435000544413924,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0004271250218153,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.0005186253304903706,
              "std_time": 1.1835505524687804e-05,
              "min_time": 0.0005072919884696603,
              "max_time": 0.000534959021024406,
              "tokens_per_second": 30850.787764013916,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0008276530231038729,
              "std_time": 8.218240622400693e-05,
              "min_time": 0.0007550000445917249,
              "max_time": 0.0009425421012565494,
              "tokens_per_second": 38663.54511700237,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "passed",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_sparsemax_temperature_mlx.py": {
      "file_name": "delta_net_sparsemax_temperature_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "MultiScaleGate",
              "line": 147,
              "bases": [
                "<ast.Attribute object at 0x110f0d780>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 228,
              "bases": [
                "<ast.Attribute object at 0x110e73850>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 231,
              "args": [
                "self"
              ]
            },
            {
              "name": "__call__",
              "line": 322,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 228,
            "methods": [
              {
                "name": "__init__",
                "line": 231,
                "args": [
                  "self"
                ]
              },
              {
                "name": "__call__",
                "line": 322,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "passed",
          "message": "No PyTorch remnants found"
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (105 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 65
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 13
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 2
            },
            {
              "pattern": "MLX array usage",
              "count": 21
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0002s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.000149125000461936,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.000216791988350451,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00027633330319076777,
              "std_time": 4.874643032129924e-05,
              "min_time": 0.00020745897199958563,
              "max_time": 0.0003133330028504133,
              "tokens_per_second": 57901.09196123327,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0005284580014025172,
              "std_time": 3.846947570764805e-05,
              "min_time": 0.00047450000420212746,
              "max_time": 0.0005614579422399402,
              "tokens_per_second": 60553.534841127635,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "passed",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_hpaf_mlx.py": {
      "file_name": "delta_net_hpaf_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 84,
              "bases": [
                "<ast.Attribute object at 0x110f1ac50>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 196,
              "bases": [
                "<ast.Attribute object at 0x110ea3100>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 207,
              "bases": [
                "<ast.Attribute object at 0x110ea0cd0>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 218,
              "bases": [
                "<ast.Attribute object at 0x110ea1d80>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 239,
              "bases": [
                "<ast.Attribute object at 0x110e780d0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 240,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 326,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 239,
            "methods": [
              {
                "name": "__init__",
                "line": 240,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 326,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (123 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 75
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 13
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 26
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0022s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.0015140000032261014,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.002963750041089952,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.006894000340253115,
              "std_time": 0.0011277921814708005,
              "min_time": 0.005311292014084756,
              "max_time": 0.007856084033846855,
              "tokens_per_second": 2320.858603179668,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.01435079169459641,
              "std_time": 0.0010970246967749442,
              "min_time": 0.012802292010746896,
              "max_time": 0.015207541990093887,
              "tokens_per_second": 2229.842135611874,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_tareia_mlx.py": {
      "file_name": "delta_net_tareia_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 84,
              "bases": [
                "<ast.Attribute object at 0x110f02c20>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 176,
              "bases": [
                "<ast.Attribute object at 0x110ec47c0>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 187,
              "bases": [
                "<ast.Attribute object at 0x110ec74c0>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 198,
              "bases": [
                "<ast.Attribute object at 0x110ea2230>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 218,
              "bases": [
                "<ast.Attribute object at 0x110ea0790>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 219,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 305,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 218,
            "methods": [
              {
                "name": "__init__",
                "line": 219,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 305,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (115 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 70
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 10
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 26
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0002s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00014587503392249346,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00017362507060170174,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00019194469011078277,
              "std_time": 2.4278030623895377e-05,
              "min_time": 0.00015766709111630917,
              "max_time": 0.00021079194266349077,
              "tokens_per_second": 83357.3462791049,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0003072499530389905,
              "std_time": 1.3193489548119602e-05,
              "min_time": 0.0002889159368351102,
              "max_time": 0.00031941698398441076,
              "tokens_per_second": 104149.73113417905,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_hybrid_floor_gt_mlx.py": {
      "file_name": "delta_net_hybrid_floor_gt_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 84,
              "bases": [
                "<ast.Attribute object at 0x110e8ec50>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 183,
              "bases": [
                "<ast.Attribute object at 0x110eaaa70>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 194,
              "bases": [
                "<ast.Attribute object at 0x110ea10c0>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 205,
              "bases": [
                "<ast.Attribute object at 0x110ea18d0>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 225,
              "bases": [
                "<ast.Attribute object at 0x110d7f640>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 226,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 312,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 225,
            "methods": [
              {
                "name": "__init__",
                "line": 226,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 312,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (119 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 75
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 8
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 27
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0019s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.0013000830076634884,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.0024682499933987856,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.006122819303224484,
              "std_time": 0.0009865921264851226,
              "min_time": 0.004731375025585294,
              "max_time": 0.00690774992108345,
              "tokens_per_second": 2613.175272308601,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.012731624961209794,
              "std_time": 0.0008795484517560372,
              "min_time": 0.01148866699077189,
              "max_time": 0.013394332956522703,
              "tokens_per_second": 2513.4262199441405,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_dyn_decay_fractal_gate_mlx.py": {
      "file_name": "delta_net_dyn_decay_fractal_gate_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "typing",
            "functools",
            "math",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "ShortConvolution",
              "line": 137,
              "bases": [
                "<ast.Attribute object at 0x110e71b70>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 170,
              "bases": [
                "<ast.Attribute object at 0x110e70520>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 180,
              "bases": [
                "<ast.Attribute object at 0x110f0b6a0>"
              ]
            },
            {
              "name": "_CausalFractalMixer",
              "line": 343,
              "bases": [
                "<ast.Attribute object at 0x110ea24d0>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 388,
              "bases": [
                "<ast.Attribute object at 0x110d7f2e0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 391,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "use_rotary",
                "adaptive_decay",
                "use_fractal_mixer",
                "mixer_levels"
              ]
            },
            {
              "name": "__call__",
              "line": 505,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 388,
            "methods": [
              {
                "name": "__init__",
                "line": 391,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "use_rotary",
                  "adaptive_decay",
                  "use_fractal_mixer",
                  "mixer_levels"
                ]
              },
              {
                "name": "__call__",
                "line": 505,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 2 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 54,
              "match": "einops",
              "context": "#####\n# Helper functions for rearranging tensors (einops replacement)      #\n#############################"
            },
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 58,
              "match": "einops",
              "context": "attern: str, **kwargs) -> mx.array:\n    \"\"\"Simple einops rearrange replacement for common patterns\"\"\""
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (135 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 84
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 10
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 32
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0006s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0006510419771075249,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.000604917062446475,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.0006333750595028201,
              "std_time": 7.406369096646612e-05,
              "min_time": 0.0005352500593289733,
              "max_time": 0.000714167021214962,
              "tokens_per_second": 25261.49358100634,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0006195692888771495,
              "std_time": 6.206576273112891e-06,
              "min_time": 0.0006129579851403832,
              "max_time": 0.0006278749788179994,
              "tokens_per_second": 51648.78339595215,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_head_gate_ema_mlx.py": {
      "file_name": "delta_net_head_gate_ema_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "typing",
            "math",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "ShortConvolution",
              "line": 108,
              "bases": [
                "<ast.Attribute object at 0x110ecdab0>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 150,
              "bases": [
                "<ast.Attribute object at 0x110ed2a40>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 153,
              "args": [
                "self"
              ]
            },
            {
              "name": "__call__",
              "line": 247,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 150,
            "methods": [
              {
                "name": "__init__",
                "line": 153,
                "args": [
                  "self"
                ]
              },
              {
                "name": "__call__",
                "line": 247,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "passed",
          "message": "No PyTorch remnants found"
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (73 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 49
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 7
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 2
            },
            {
              "pattern": "MLX module call method",
              "count": 2
            },
            {
              "pattern": "MLX array usage",
              "count": 13
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0001s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 5.562498699873686e-05,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 4.766590427607298e-05,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 5.416669106731812e-05,
              "std_time": 5.932950101012152e-06,
              "min_time": 4.600000102072954e-05,
              "max_time": 5.991698708385229e-05,
              "tokens_per_second": 295384.4823217145,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 6.380564688394467e-05,
              "std_time": 3.829966579105547e-06,
              "min_time": 6.045796908438206e-05,
              "max_time": 6.916699931025505e-05,
              "tokens_per_second": 501523.0087425399,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "passed",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_len_hgate_mixanneal_mlx.py": {
      "file_name": "delta_net_len_hgate_mixanneal_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "_DepthwiseFIRConv1d",
              "line": 100,
              "bases": [
                "<ast.Attribute object at 0x110e7ecb0>"
              ]
            },
            {
              "name": "_ShortConvolution",
              "line": 137,
              "bases": [
                "<ast.Attribute object at 0x110ee3910>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 193,
              "bases": [
                "<ast.Attribute object at 0x110eca5f0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 197,
              "args": [
                "self"
              ]
            },
            {
              "name": "_decay_factor",
              "line": 340,
              "args": [
                "self",
                "steps"
              ]
            },
            {
              "name": "_tau_blend_factor",
              "line": 347,
              "args": [
                "self"
              ]
            },
            {
              "name": "_effective_log_temp",
              "line": 356,
              "args": [
                "self",
                "log_temp"
              ]
            },
            {
              "name": "_apply_temp_and_floor",
              "line": 366,
              "args": [
                "self",
                "logits",
                "log_temp",
                "eps_base",
                "eps_factor"
              ]
            },
            {
              "name": "__call__",
              "line": 383,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 193,
            "methods": [
              {
                "name": "__init__",
                "line": 197,
                "args": [
                  "self"
                ]
              },
              {
                "name": "_decay_factor",
                "line": 340,
                "args": [
                  "self",
                  "steps"
                ]
              },
              {
                "name": "_tau_blend_factor",
                "line": 347,
                "args": [
                  "self"
                ]
              },
              {
                "name": "_effective_log_temp",
                "line": 356,
                "args": [
                  "self",
                  "log_temp"
                ]
              },
              {
                "name": "_apply_temp_and_floor",
                "line": 366,
                "args": [
                  "self",
                  "logits",
                  "log_temp",
                  "eps_base",
                  "eps_factor"
                ]
              },
              {
                "name": "__call__",
                "line": 383,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "passed",
          "message": "No PyTorch remnants found"
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (122 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 75
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 12
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 3
            },
            {
              "pattern": "MLX module call method",
              "count": 3
            },
            {
              "pattern": "MLX array usage",
              "count": 29
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0014s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0020232920069247484,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.000769917038269341,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.0007198612826565901,
              "std_time": 4.9638345964533695e-05,
              "min_time": 0.0006561249028891325,
              "max_time": 0.0007772089447826147,
              "tokens_per_second": 22226.504446736304,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.001547486016837259,
              "std_time": 0.0011934977702774932,
              "min_time": 0.0006976659642532468,
              "max_time": 0.0032353330170735717,
              "tokens_per_second": 20678.700583932496,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "passed",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_hmgapf_mlx.py": {
      "file_name": "delta_net_hmgapf_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 94,
              "bases": [
                "<ast.Attribute object at 0x110e8ccd0>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 210,
              "bases": [
                "<ast.Attribute object at 0x110ea04f0>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 221,
              "bases": [
                "<ast.Attribute object at 0x110ea2f80>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 232,
              "bases": [
                "<ast.Attribute object at 0x1017dd870>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 252,
              "bases": [
                "<ast.Attribute object at 0x110f19210>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 253,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 339,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 252,
            "methods": [
              {
                "name": "__init__",
                "line": 253,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 339,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (124 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 77
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 11
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 27
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0334s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.02160824998281896,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.045205791015177965,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.18893769499845803,
              "std_time": 0.025367883373536987,
              "min_time": 0.15443766699172556,
              "max_time": 0.21470858401153237,
              "tokens_per_second": 84.68400125306165,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.39452145795803517,
              "std_time": 0.03182729643078267,
              "min_time": 0.35131129098590463,
              "max_time": 0.42704104096628726,
              "tokens_per_second": 81.11092401824138,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_afp_mlx.py": {
      "file_name": "delta_net_afp_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 127,
              "bases": [
                "<ast.Attribute object at 0x110e8e7d0>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 208,
              "bases": [
                "<ast.Attribute object at 0x110e60c70>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 220,
              "bases": [
                "<ast.Attribute object at 0x110e60070>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 232,
              "bases": [
                "<ast.Attribute object at 0x110e6a710>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 283,
              "bases": [
                "<ast.Attribute object at 0x110e6b880>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 286,
              "args": [
                "self"
              ]
            },
            {
              "name": "__call__",
              "line": 426,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 283,
            "methods": [
              {
                "name": "__init__",
                "line": 286,
                "args": [
                  "self"
                ]
              },
              {
                "name": "__call__",
                "line": 426,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 5 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 31,
              "match": "einops",
              "context": "ise \u0394-rule and\n  depth-wise FIR convolutions.\n* **einops everywhere** \u2013 every reshape / transpose is perfo"
            },
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 32,
              "match": "einops",
              "context": "\u2013 every reshape / transpose is performed with\n  `einops.rearrange` for dynamic shape safety.\n\nThe public"
            },
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 46,
              "match": "einops",
              "context": "mlx.nn as nn\n\n# Manual implementations to replace einops for MLX\ndef rearrange(x: mx.array, pattern: str,"
            },
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 48,
              "match": "einops",
              "context": "rgs) -> mx.array:\n    \"\"\"Manual implementation of einops rearrange for MLX arrays.\"\"\"\n    if pattern == \"b"
            },
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 89,
              "match": "einops",
              "context": "str) -> mx.array:\n    \"\"\"Manual implementation of einops einsum for MLX arrays.\"\"\"\n    if pattern == \"b l"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (155 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 91
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 20
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 9
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 30
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0004s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.00037825002800673246,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.00048575003165751696,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00041394428505251807,
              "std_time": 1.3743053520949156e-05,
              "min_time": 0.00040029094088822603,
              "max_time": 0.0004327499773353338,
              "tokens_per_second": 38652.54474517034,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0007412643559897939,
              "std_time": 6.577388576419594e-05,
              "min_time": 0.0006890840595588088,
              "max_time": 0.0008340419735759497,
              "tokens_per_second": 43169.4843296102,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_htcg_mlx.py": {
      "file_name": "delta_net_htcg_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 86,
              "bases": [
                "<ast.Attribute object at 0x110e66a40>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 189,
              "bases": [
                "<ast.Attribute object at 0x110e686a0>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 200,
              "bases": [
                "<ast.Attribute object at 0x110ea2d40>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 211,
              "bases": [
                "<ast.Attribute object at 0x110ea02e0>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 231,
              "bases": [
                "<ast.Attribute object at 0x1017de8c0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 232,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 318,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 231,
            "methods": [
              {
                "name": "__init__",
                "line": 232,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 318,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (119 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 73
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 11
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 26
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0002s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00021129206288605928,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.0002732920693233609,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.0003185420064255595,
              "std_time": 4.182322135767263e-05,
              "min_time": 0.00025941699277609587,
              "max_time": 0.0003494999837130308,
              "tokens_per_second": 50228.85420839798,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0005472220170001189,
              "std_time": 2.289216768354989e-05,
              "min_time": 0.0005150830838829279,
              "max_time": 0.0005666669458150864,
              "tokens_per_second": 58477.17929081982,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_annealed_eklf_mlx.py": {
      "file_name": "delta_net_annealed_eklf_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "_DepthwiseFIRConv1d",
              "line": 94,
              "bases": [
                "<ast.Attribute object at 0x110f03e50>"
              ]
            },
            {
              "name": "_ShortConvolution",
              "line": 163,
              "bases": [
                "<ast.Attribute object at 0x110ec9ae0>"
              ]
            },
            {
              "name": "_RMSNorm",
              "line": 194,
              "bases": [
                "<ast.Attribute object at 0x110ec8370>"
              ]
            },
            {
              "name": "_AnnealedEKLGate",
              "line": 212,
              "bases": [
                "<ast.Attribute object at 0x110ebe980>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 327,
              "bases": [
                "<ast.Attribute object at 0x110e68e20>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 330,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_short_kernel",
                "fir_long_kernel",
                "gate_hard_floor",
                "gate_learnable_floor_max",
                "gate_entropy_w",
                "gate_kl_w",
                "gate_tau_min",
                "gate_mlp_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 428,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 327,
            "methods": [
              {
                "name": "__init__",
                "line": 330,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_short_kernel",
                  "fir_long_kernel",
                  "gate_hard_floor",
                  "gate_learnable_floor_max",
                  "gate_entropy_w",
                  "gate_kl_w",
                  "gate_tau_min",
                  "gate_mlp_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 428,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "torch\\.",
              "description": "PyTorch module usage",
              "line": 57,
              "match": "torch.",
              "context": "- Converted from PyTorch to MLX format\n- Replaced torch.nn with mlx.nn\n- Updated tensor operations for MLX"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (97 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 54
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 7
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 9
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 22
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0001s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.00016070902347564697,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.00011312495917081833,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00013579168201734623,
              "std_time": 1.71160872939705e-06,
              "min_time": 0.00013445806689560413,
              "max_time": 0.00013820792082697153,
              "tokens_per_second": 117827.54114464932,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.00014524996125449738,
              "std_time": 1.4948814027157611e-05,
              "min_time": 0.00013029191177338362,
              "max_time": 0.0001656670356169343,
              "tokens_per_second": 220309.8694390129,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_ndg_mlx.py": {
      "file_name": "delta_net_ndg_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 110,
              "bases": [
                "<ast.Attribute object at 0x110e3e230>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 216,
              "bases": [
                "<ast.Attribute object at 0x110e66110>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 227,
              "bases": [
                "<ast.Attribute object at 0x110e66d10>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 238,
              "bases": [
                "<ast.Attribute object at 0x110e67a00>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 258,
              "bases": [
                "<ast.Attribute object at 0x110e60f40>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 259,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 345,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 258,
            "methods": [
              {
                "name": "__init__",
                "line": 259,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 345,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (123 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 76
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 10
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 28
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0002s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00020466698333621025,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.0002019170206040144,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00022227763353536525,
              "std_time": 2.705824931152636e-05,
              "min_time": 0.0001842080382630229,
              "max_time": 0.00024466693866997957,
              "tokens_per_second": 71982.05121008874,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.00035043029735485714,
              "std_time": 1.9771592890806753e-05,
              "min_time": 0.0003269169246777892,
              "max_time": 0.00037529098335653543,
              "tokens_per_second": 91316.30524399481,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_afbt_mlx.py": {
      "file_name": "delta_net_afbt_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "_DepthwiseFIRConv1d",
              "line": 97,
              "bases": [
                "<ast.Attribute object at 0x110ec8ac0>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 144,
              "bases": [
                "<ast.Attribute object at 0x110ebdcc0>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 188,
              "bases": [
                "<ast.Attribute object at 0x110edd9f0>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 199,
              "bases": [
                "<ast.Attribute object at 0x110ede890>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 213,
              "bases": [
                "<ast.Attribute object at 0x110eced10>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 216,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_short_kernel",
                "fir_long_kernel",
                "fusion_hidden_mult",
                "fusion_include_path_outputs",
                "value_bias_init",
                "min_context_floor",
                "max_context_floor",
                "floor_decay_steps",
                "tau_min",
                "entropy_coeff",
                "fusion_dropout"
              ]
            },
            {
              "name": "__call__",
              "line": 344,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 213,
            "methods": [
              {
                "name": "__init__",
                "line": 216,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_short_kernel",
                  "fir_long_kernel",
                  "fusion_hidden_mult",
                  "fusion_include_path_outputs",
                  "value_bias_init",
                  "min_context_floor",
                  "max_context_floor",
                  "floor_decay_steps",
                  "tau_min",
                  "entropy_coeff",
                  "fusion_dropout"
                ]
              },
              {
                "name": "__call__",
                "line": 344,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 40,
              "match": "einops",
              "context": "nn as nn\n\n# Manual rearrange functions to replace einops\ndef rearrange(x, pattern, **kwargs):\n    \"\"\"Simpl"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (103 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 62
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 11
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 21
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0008s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.001156790996901691,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0004885420203208923,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.0004965696716681123,
              "std_time": 2.868422454784313e-05,
              "min_time": 0.0004561670357361436,
              "max_time": 0.0005199169972911477,
              "tokens_per_second": 32221.05761363085,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0007913329948981603,
              "std_time": 0.0001096040714803751,
              "min_time": 0.0006420409772545099,
              "max_time": 0.0009020830038934946,
              "tokens_per_second": 40438.096485687674,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_aefg_hr_mlx.py": {
      "file_name": "delta_net_aefg_hr_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "_DepthwiseFIRConv1d",
              "line": 75,
              "bases": [
                "<ast.Attribute object at 0x110ed4160>"
              ]
            },
            {
              "name": "_AdaptiveFusionGate",
              "line": 161,
              "bases": [
                "<ast.Attribute object at 0x110e7f6a0>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 301,
              "bases": [
                "<ast.Attribute object at 0x110ed2c50>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 304,
              "args": [
                "self"
              ]
            },
            {
              "name": "_rms_norm",
              "line": 416,
              "args": [
                "self",
                "x"
              ]
            },
            {
              "name": "__call__",
              "line": 421,
              "args": [
                "self",
                "hidden_states",
                "attention_mask"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 301,
            "methods": [
              {
                "name": "__init__",
                "line": 304,
                "args": [
                  "self"
                ]
              },
              {
                "name": "_rms_norm",
                "line": 416,
                "args": [
                  "self",
                  "x"
                ]
              },
              {
                "name": "__call__",
                "line": 421,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 2 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "torch\\.",
              "description": "PyTorch module usage",
              "line": 40,
              "match": "torch.",
              "context": "-floored path fusion, batch-agnostic shapes, and @torch.compile on\nheavy kernels \u2013 are preserved.\n\"\"\"\nfrom"
            },
            {
              "pattern": "@torch\\.compile",
              "description": "PyTorch compile decorator",
              "line": 40,
              "match": "@torch.compile",
              "context": "y-floored path fusion, batch-agnostic shapes, and @torch.compile on\nheavy kernels \u2013 are preserved.\n\"\"\"\nfrom __futu"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (133 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 78
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 18
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 9
            },
            {
              "pattern": "MLX module call method",
              "count": 3
            },
            {
              "pattern": "MLX array usage",
              "count": 25
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0067s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.008215499925427139,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0051499999826774,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.016577291302382946,
              "std_time": 0.0050144184026526895,
              "min_time": 0.01263929100241512,
              "max_time": 0.023653707932680845,
              "tokens_per_second": 965.1757761957189,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.022008791643505294,
              "std_time": 0.013508564411633006,
              "min_time": 0.01240937493275851,
              "max_time": 0.04111270804423839,
              "tokens_per_second": 1453.9644210518513,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_entropy_kl_floor_gate_mlx.py": {
      "file_name": "delta_net_entropy_kl_floor_gate_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn",
            "typing"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "_DepthwiseFIRConv1d",
              "line": 98,
              "bases": [
                "<ast.Attribute object at 0x110f00850>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 237,
              "bases": [
                "<ast.Attribute object at 0x110f1b1f0>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 248,
              "bases": [
                "<ast.Attribute object at 0x110f19930>"
              ]
            },
            {
              "name": "_EntropyKLFusionGate",
              "line": 259,
              "bases": [
                "<ast.Attribute object at 0x110f18c40>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 371,
              "bases": [
                "<ast.Attribute object at 0x111432050>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 391,
              "bases": [
                "<ast.Attribute object at 0x111433550>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 394,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_short_kernel",
                "fir_long_kernel",
                "fir_noise_std",
                "fusion_hidden_mult",
                "fusion_max_floor",
                "fusion_temp_init",
                "gate_entropy_weight",
                "gate_kl_weight",
                "use_forget_gate",
                "forget_min",
                "forget_init"
              ]
            },
            {
              "name": "__call__",
              "line": 506,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 391,
            "methods": [
              {
                "name": "__init__",
                "line": 394,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_short_kernel",
                  "fir_long_kernel",
                  "fir_noise_std",
                  "fusion_hidden_mult",
                  "fusion_max_floor",
                  "fusion_temp_init",
                  "gate_entropy_weight",
                  "gate_kl_weight",
                  "use_forget_gate",
                  "forget_min",
                  "forget_init"
                ]
              },
              {
                "name": "__call__",
                "line": 506,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 19,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (193 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 116
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 22
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 10
            },
            {
              "pattern": "MLX module call method",
              "count": 6
            },
            {
              "pattern": "MLX array usage",
              "count": 39
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0190s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.026053042034618556,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.012002166942693293,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.020954610624661047,
              "std_time": 0.0004012661179704308,
              "min_time": 0.02061266591772437,
              "max_time": 0.021517790970392525,
              "tokens_per_second": 763.5551090207293,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.03958459737865875,
              "std_time": 0.000538767417744221,
              "min_time": 0.03907225001603365,
              "max_time": 0.04032916703727096,
              "tokens_per_second": 808.3952375186255,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_adaptive_mix_gate_mlx.py": {
      "file_name": "delta_net_adaptive_mix_gate_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "ShortConvolution",
              "line": 89,
              "bases": [
                "<ast.Attribute object at 0x110e69f90>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 115,
              "bases": [
                "<ast.Attribute object at 0x110ed1c00>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 235,
              "bases": [
                "<ast.Attribute object at 0x110eddc60>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 246,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "use_mix_gate"
              ]
            },
            {
              "name": "__call__",
              "line": 356,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 235,
            "methods": [
              {
                "name": "__init__",
                "line": 246,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "use_mix_gate"
                ]
              },
              {
                "name": "__call__",
                "line": 356,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 23,
              "match": "einops",
              "context": "attern: str, **kwargs) -> mx.array:\n    \"\"\"Simple einops rearrange replacement for common patterns\"\"\""
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (82 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 50
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 11
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 3
            },
            {
              "pattern": "MLX module call method",
              "count": 3
            },
            {
              "pattern": "MLX array usage",
              "count": 15
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0018s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0018040420254692435,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.001745374989695847,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.0019817082987477383,
              "std_time": 0.00021565312159864264,
              "min_time": 0.0016768339555710554,
              "max_time": 0.002141083008609712,
              "tokens_per_second": 8073.842154322391,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.002121333653728167,
              "std_time": 1.9259005283695712e-05,
              "min_time": 0.002095084055326879,
              "max_time": 0.0021407499443739653,
              "tokens_per_second": 15084.850015819604,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_dfpcr_mlx.py": {
      "file_name": "delta_net_dfpcr_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn",
            "transformers.processing_utils"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "_DepthwiseCausalConv1d",
              "line": 158,
              "bases": [
                "<ast.Attribute object at 0x110f09960>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 191,
              "bases": [
                "<ast.Attribute object at 0x110eb5cc0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 194,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "local_kernel_size",
                "mid_kernel_size",
                "router_hidden_mult",
                "router_init_bias_delta",
                "router_init_bias_identity"
              ]
            },
            {
              "name": "__call__",
              "line": 300,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 191,
            "methods": [
              {
                "name": "__init__",
                "line": 194,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "local_kernel_size",
                  "mid_kernel_size",
                  "router_hidden_mult",
                  "router_init_bias_delta",
                  "router_init_bias_identity"
                ]
              },
              {
                "name": "__call__",
                "line": 300,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 4 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 19,
              "match": "einops",
              "context": "(left-padded; O(N) complexity), implemented using einops for dynamic dimensions and batch-agnostic shape s"
            },
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 34,
              "match": "einops",
              "context": "re, and **kwargs support.\n   - All tensor ops via einops; true batch size and sequence agnostic, universal"
            },
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 51,
              "match": "einops",
              "context": "x.nn as nn\n\n# Manual reshape functions to replace einops for MLX arrays\ndef rearrange(x, pattern, **kwargs"
            },
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 53,
              "match": "einops",
              "context": "ef rearrange(x, pattern, **kwargs):\n    \"\"\"Simple einops rearrange replacement for MLX arrays\"\"\"\n    if \"b"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (64 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 41
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 11
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 2
            },
            {
              "pattern": "MLX module call method",
              "count": 2
            },
            {
              "pattern": "MLX array usage",
              "count": 8
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0002s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.000148666906170547,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.00017850007861852646,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.0001985140067214767,
              "std_time": 2.5205135122692654e-05,
              "min_time": 0.0001628749305382371,
              "max_time": 0.00021691701840609312,
              "tokens_per_second": 80598.8467224313,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.00032704199353853863,
              "std_time": 1.0517709094484195e-05,
              "min_time": 0.0003122501075267792,
              "max_time": 0.0003357919631525874,
              "tokens_per_second": 97846.76167658305,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_psfr_mlx.py": {
      "file_name": "delta_net_psfr_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 84,
              "bases": [
                "<ast.Attribute object at 0x110edf1c0>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 182,
              "bases": [
                "<ast.Attribute object at 0x110ec5a50>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 193,
              "bases": [
                "<ast.Attribute object at 0x110ec4e50>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 204,
              "bases": [
                "<ast.Attribute object at 0x110eab0a0>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 241,
              "bases": [
                "<ast.Attribute object at 0x110ea8bb0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 242,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 328,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 241,
            "methods": [
              {
                "name": "__init__",
                "line": 242,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 328,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (124 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 77
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 12
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 26
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0003s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.0002614579861983657,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00032104202546179295,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.0003764996848379572,
              "std_time": 4.753906621019735e-05,
              "min_time": 0.00030995800625532866,
              "max_time": 0.00041808304376900196,
              "tokens_per_second": 42496.71552019037,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0006839026852200428,
              "std_time": 4.1332951477906267e-05,
              "min_time": 0.0006276670610532165,
              "max_time": 0.0007258330006152391,
              "tokens_per_second": 46790.28272816934,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_dyn_gate_mix_mlx.py": {
      "file_name": "delta_net_dyn_gate_mix_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "typing",
            "mlx.core",
            "mlx.nn",
            "transformers.processing_utils"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "RMSNorm",
              "line": 176,
              "bases": [
                "<ast.Attribute object at 0x110f14c70>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 185,
              "bases": [
                "<ast.Attribute object at 0x110f14250>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 195,
              "bases": [
                "<ast.Attribute object at 0x110eb7640>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 233,
              "bases": [
                "<ast.Attribute object at 0x110eb51b0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 236,
              "args": [
                "self"
              ]
            },
            {
              "name": "__call__",
              "line": 331,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 233,
            "methods": [
              {
                "name": "__init__",
                "line": 236,
                "args": [
                  "self"
                ]
              },
              {
                "name": "__call__",
                "line": 331,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 25,
              "match": "einops",
              "context": "- All code is fully batch-size agnostic, uses einops.rearrange for shape handling, and preserves compi"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (82 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 54
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 13
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 4
            },
            {
              "pattern": "MLX array usage",
              "count": 7
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0005s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0004286249168217182,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0005219170125201344,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.0006254443433135748,
              "std_time": 8.623209454239579e-05,
              "min_time": 0.0005053749773651361,
              "max_time": 0.000703957979567349,
              "tokens_per_second": 25581.812628175274,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.000952125332939128,
              "std_time": 3.833229116319429e-05,
              "min_time": 0.000898041995242238,
              "max_time": 0.000982375000603497,
              "tokens_per_second": 33609.020675060485,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_syngf_mlx.py": {
      "file_name": "delta_net_syngf_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 84,
              "bases": [
                "<ast.Attribute object at 0x110ea3310>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 174,
              "bases": [
                "<ast.Attribute object at 0x110eda2c0>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 185,
              "bases": [
                "<ast.Attribute object at 0x110ed96c0>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 196,
              "bases": [
                "<ast.Attribute object at 0x110ed89d0>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 216,
              "bases": [
                "<ast.Attribute object at 0x110e7c1f0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 217,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 303,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 216,
            "methods": [
              {
                "name": "__init__",
                "line": 217,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 303,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (116 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 72
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 9
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 26
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0002s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.0002348329871892929,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00023854104802012444,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00017776402334372202,
              "std_time": 1.643323594687356e-05,
              "min_time": 0.00015462504234164953,
              "max_time": 0.0001912090228870511,
              "tokens_per_second": 90006.96372101472,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0002886247045050065,
              "std_time": 1.2579674114373236e-05,
              "min_time": 0.0002708750544115901,
              "max_time": 0.00029854103922843933,
              "tokens_per_second": 110870.6202224797,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_adgr_mlx.py": {
      "file_name": "delta_net_adgr_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 85,
              "bases": [
                "<ast.Attribute object at 0x110ec7610>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 182,
              "bases": [
                "<ast.Attribute object at 0x110e6a3e0>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 193,
              "bases": [
                "<ast.Attribute object at 0x110e697e0>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 204,
              "bases": [
                "<ast.Attribute object at 0x110e68af0>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 224,
              "bases": [
                "<ast.Attribute object at 0x110f00f70>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 225,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult",
                "copy_bias_init",
                "temp_init",
                "temp_min",
                "gate_entropy_reg_weight",
                "min_path_eps"
              ]
            },
            {
              "name": "__call__",
              "line": 325,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 224,
            "methods": [
              {
                "name": "__init__",
                "line": 225,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult",
                  "copy_bias_init",
                  "temp_init",
                  "temp_min",
                  "gate_entropy_reg_weight",
                  "min_path_eps"
                ]
              },
              {
                "name": "__call__",
                "line": 325,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 13,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (123 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 77
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 11
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 26
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0002s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00022175000049173832,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00024266703985631466,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00018137499379614988,
              "std_time": 2.1934208741932492e-05,
              "min_time": 0.00015037506818771362,
              "max_time": 0.00019783293828368187,
              "tokens_per_second": 88215.0271386509,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0002896666604404648,
              "std_time": 9.904354225250693e-06,
              "min_time": 0.0002757500624284148,
              "max_time": 0.00029799994081258774,
              "tokens_per_second": 110471.80904886001,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_ahic_mlx.py": {
      "file_name": "delta_net_ahic_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "_DepthwiseFIRConv1d",
              "line": 116,
              "bases": [
                "<ast.Attribute object at 0x110e64ee0>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 193,
              "bases": [
                "<ast.Attribute object at 0x110f0a050>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 194,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_short_kernel",
                "fir_long_kernel",
                "epsilon_id",
                "alpha_reg_strength",
                "fusion_hidden_mult",
                "group_size",
                "tau_transition_steps",
                "router_epsilon_start",
                "router_epsilon_end",
                "router_epsilon_decay",
                "router_entropy_start",
                "router_entropy_end",
                "router_entropy_decay"
              ]
            },
            {
              "name": "_current_router_epsilon",
              "line": 320,
              "args": [
                "self"
              ]
            },
            {
              "name": "_current_router_entropy_coeff",
              "line": 327,
              "args": [
                "self"
              ]
            },
            {
              "name": "_mix_temperature",
              "line": 334,
              "args": [
                "self"
              ]
            },
            {
              "name": "_stats_mean_std",
              "line": 347,
              "args": [
                "path"
              ]
            },
            {
              "name": "_apply_conv1d",
              "line": 355,
              "args": [
                "self",
                "x",
                "conv_layer"
              ]
            },
            {
              "name": "__call__",
              "line": 374,
              "args": [
                "self",
                "hidden_states",
                "attention_mask"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 193,
            "methods": [
              {
                "name": "__init__",
                "line": 194,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_short_kernel",
                  "fir_long_kernel",
                  "epsilon_id",
                  "alpha_reg_strength",
                  "fusion_hidden_mult",
                  "group_size",
                  "tau_transition_steps",
                  "router_epsilon_start",
                  "router_epsilon_end",
                  "router_epsilon_decay",
                  "router_entropy_start",
                  "router_entropy_end",
                  "router_entropy_decay"
                ]
              },
              {
                "name": "_current_router_epsilon",
                "line": 320,
                "args": [
                  "self"
                ]
              },
              {
                "name": "_current_router_entropy_coeff",
                "line": 327,
                "args": [
                  "self"
                ]
              },
              {
                "name": "_mix_temperature",
                "line": 334,
                "args": [
                  "self"
                ]
              },
              {
                "name": "_stats_mean_std",
                "line": 347,
                "args": [
                  "path"
                ]
              },
              {
                "name": "_apply_conv1d",
                "line": 355,
                "args": [
                  "self",
                  "x",
                  "conv_layer"
                ]
              },
              {
                "name": "__call__",
                "line": 374,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 2 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 22,
              "match": "einops",
              "context": "allocation later.\n\n4. **All tensor operations use einops.rearrange(), zero reshaping/viewing. Supports all"
            },
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 41,
              "match": "einops",
              "context": "attern: str, **kwargs) -> mx.array:\n    \"\"\"Simple einops rearrange replacement for common patterns\"\"\""
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (99 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 60
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 13
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 5
            },
            {
              "pattern": "MLX module call method",
              "count": 2
            },
            {
              "pattern": "MLX array usage",
              "count": 19
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0008s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00023733393754810095,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.0013677499955520034,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.0005671386995042363,
              "std_time": 3.762266233550769e-05,
              "min_time": 0.00053491594735533,
              "max_time": 0.0006199170602485538,
              "tokens_per_second": 28211.79371816168,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0005659029896681508,
              "std_time": 3.0011113887409954e-05,
              "min_time": 0.0005372089799493551,
              "max_time": 0.0006073330296203494,
              "tokens_per_second": 56546.79438743558,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_aggf_v2_mlx.py": {
      "file_name": "delta_net_aggf_v2_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "mlx.core",
            "mlx.nn",
            "typing"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "_DepthwiseFIRConv1d",
              "line": 124,
              "bases": [
                "<ast.Attribute object at 0x110ef1b70>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 213,
              "bases": [
                "<ast.Attribute object at 0x110e762c0>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 225,
              "bases": [
                "<ast.Attribute object at 0x110e76e30>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 237,
              "bases": [
                "<ast.Attribute object at 0x110ec7430>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 256,
              "bases": [
                "<ast.Attribute object at 0x110ec6230>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 258,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult",
                "gate_copy_bias_init",
                "gate_copy_bias_min",
                "gate_copy_bias_steps",
                "gate_copy_bias_learnable",
                "epsilon_floor_start",
                "epsilon_floor_min",
                "epsilon_floor_steps",
                "delta_loss_weight"
              ]
            },
            {
              "name": "_per_head_stats",
              "line": 380,
              "args": [
                "x"
              ]
            },
            {
              "name": "_get_bias_value",
              "line": 389,
              "args": [
                "self"
              ]
            },
            {
              "name": "_get_epsilon_floor",
              "line": 401,
              "args": [
                "self"
              ]
            },
            {
              "name": "__call__",
              "line": 407,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 256,
            "methods": [
              {
                "name": "__init__",
                "line": 258,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult",
                  "gate_copy_bias_init",
                  "gate_copy_bias_min",
                  "gate_copy_bias_steps",
                  "gate_copy_bias_learnable",
                  "epsilon_floor_start",
                  "epsilon_floor_min",
                  "epsilon_floor_steps",
                  "delta_loss_weight"
                ]
              },
              {
                "name": "_per_head_stats",
                "line": 380,
                "args": [
                  "x"
                ]
              },
              {
                "name": "_get_bias_value",
                "line": 389,
                "args": [
                  "self"
                ]
              },
              {
                "name": "_get_epsilon_floor",
                "line": 401,
                "args": [
                  "self"
                ]
              },
              {
                "name": "__call__",
                "line": 407,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 5 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "torch\\.",
              "description": "PyTorch module usage",
              "line": 48,
              "match": "torch.",
              "context": "CONVERSION NOTES\n--------------------\n- Replaced torch.nn with mlx.nn modules\n- Converted torch.Tensor op"
            },
            {
              "pattern": "torch\\.",
              "description": "PyTorch module usage",
              "line": 49,
              "match": "torch.",
              "context": "Replaced torch.nn with mlx.nn modules\n- Converted torch.Tensor operations to mlx.core.array\n- Removed devi"
            },
            {
              "pattern": "\\.cuda\\(\\)",
              "description": "CUDA device usage",
              "line": 50,
              "match": ".cuda()",
              "context": ".core.array\n- Removed device-specific operations (.cuda(), .to())\n- Updated activation functions to MLX equ"
            },
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 28,
              "match": "einops",
              "context": "rves all batch- and shape-agnostic operations via einops.\n   - Maintains O(N) complexity with chunked delt"
            },
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 58,
              "match": "einops",
              "context": "port mlx.core as mx\nimport mlx.nn as nn\n# Removed einops dependency for MLX compatibility\nfrom typing impo"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (137 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 81
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 17
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 9
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 25
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0032s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0028553750598803163,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.003484999993816018,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00825494434684515,
              "std_time": 0.0009816171149027884,
              "min_time": 0.00686833297368139,
              "max_time": 0.009006042033433914,
              "tokens_per_second": 1938.2323281337242,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.016367013682611287,
              "std_time": 0.0008279864062478176,
              "min_time": 0.015224333037622273,
              "max_time": 0.01715983299072832,
              "tokens_per_second": 1955.152028375071,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_dmshf_mlx.py": {
      "file_name": "delta_net_dmshf_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 84,
              "bases": [
                "<ast.Attribute object at 0x110ec1930>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 175,
              "bases": [
                "<ast.Attribute object at 0x110eeb4c0>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 186,
              "bases": [
                "<ast.Attribute object at 0x110ee9f00>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 197,
              "bases": [
                "<ast.Attribute object at 0x110eeb040>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 217,
              "bases": [
                "<ast.Attribute object at 0x1017dd900>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 218,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 304,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 217,
            "methods": [
              {
                "name": "__init__",
                "line": 218,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 304,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (116 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 72
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 9
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 26
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0003s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.0002953339135274291,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.0002626249333843589,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00017102768955131373,
              "std_time": 1.4069023304103671e-05,
              "min_time": 0.0001512920716777444,
              "max_time": 0.0001830830005928874,
              "tokens_per_second": 93552.10283186041,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0002852223115041852,
              "std_time": 1.706746382056409e-05,
              "min_time": 0.0002613749820739031,
              "max_time": 0.00030037492979317904,
              "tokens_per_second": 112193.18654014361,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_mshmfv2_mlx.py": {
      "file_name": "delta_net_mshmfv2_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn",
            "typing"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 124,
              "bases": [
                "<ast.Attribute object at 0x110ef2a40>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 195,
              "bases": [
                "<ast.Attribute object at 0x110ef0640>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 209,
              "bases": [
                "<ast.Attribute object at 0x110ea8040>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 243,
              "bases": [
                "<ast.Attribute object at 0x110ea8e50>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 246,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_long",
                "fir_kernel_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 359,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 243,
            "methods": [
              {
                "name": "__init__",
                "line": 246,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_long",
                  "fir_kernel_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 359,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 2 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 35,
              "match": "einops",
              "context": "rictly batch-size agnostic \u2013 every reshape uses ``einops.rearrange``.\n\u2022  Causality is maintained via left"
            },
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 57,
              "match": "einops",
              "context": "attern: str, **kwargs) -> mx.array:\n    \"\"\"Simple einops-like rearrange for common patterns with MLX array"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (87 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 46
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 11
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 3
            },
            {
              "pattern": "MLX module call method",
              "count": 4
            },
            {
              "pattern": "MLX array usage",
              "count": 23
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0001s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 7.78749817982316e-05,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 6.595801096409559e-05,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 7.843067093441884e-05,
              "std_time": 8.763372292376835e-06,
              "min_time": 6.604194641113281e-05,
              "max_time": 8.491601329296827e-05,
              "tokens_per_second": 204001.82491590152,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 8.654167565206687e-05,
              "std_time": 1.973009160162498e-06,
              "min_time": 8.412508759647608e-05,
              "max_time": 8.895795326679945e-05,
              "tokens_per_second": 369764.04442009144,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_psafg_mlx.py": {
      "file_name": "delta_net_psafg_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 84,
              "bases": [
                "<ast.Attribute object at 0x110ebeb90>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 200,
              "bases": [
                "<ast.Attribute object at 0x110eea800>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 211,
              "bases": [
                "<ast.Attribute object at 0x110eea680>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 222,
              "bases": [
                "<ast.Attribute object at 0x110ee84f0>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 242,
              "bases": [
                "<ast.Attribute object at 0x110e67c40>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 243,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 329,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 242,
            "methods": [
              {
                "name": "__init__",
                "line": 243,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 329,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (120 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 73
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 12
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 26
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0002s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.0001456249738112092,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.0001849159598350525,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.0002121943592404326,
              "std_time": 3.027816754907887e-05,
              "min_time": 0.00017154100351035595,
              "max_time": 0.0002441670512780547,
              "tokens_per_second": 75402.56987637813,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.000323458652322491,
              "std_time": 1.0792045679192705e-05,
              "min_time": 0.0003083340125158429,
              "max_time": 0.0003327919403091073,
              "tokens_per_second": 98930.7281478924,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_ser_minfloor_mlx.py": {
      "file_name": "delta_net_ser_minfloor_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseCausalConv1d",
              "line": 171,
              "bases": [
                "<ast.Attribute object at 0x110ecd7b0>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 197,
              "bases": [
                "<ast.Attribute object at 0x110ecc400>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 224,
              "bases": [
                "<ast.Attribute object at 0x110f0d450>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 227,
              "args": [
                "self"
              ]
            },
            {
              "name": "__call__",
              "line": 338,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 224,
            "methods": [
              {
                "name": "__init__",
                "line": 227,
                "args": [
                  "self"
                ]
              },
              {
                "name": "__call__",
                "line": 338,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "passed",
          "message": "No PyTorch remnants found"
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (102 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 57
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 6
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 3
            },
            {
              "pattern": "MLX module call method",
              "count": 3
            },
            {
              "pattern": "MLX array usage",
              "count": 33
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0001s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 8.387491106987e-05,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 7.708300836384296e-05,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 9.32779706393679e-05,
              "std_time": 1.4533018615821852e-05,
              "min_time": 7.275003008544445e-05,
              "max_time": 0.00010441697668284178,
              "tokens_per_second": 171530.3183627283,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 9.627803228795528e-05,
              "std_time": 1.6020895844189315e-06,
              "min_time": 9.425007738173008e-05,
              "max_time": 9.816698729991913e-05,
              "tokens_per_second": 332370.7313033994,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "passed",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_entropy_cagf_rc_norm_mlx.py": {
      "file_name": "delta_net_entropy_cagf_rc_norm_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 49,
              "bases": [
                "<ast.Attribute object at 0x110ec03d0>"
              ]
            },
            {
              "name": "DynamicResGatingMLP",
              "line": 129,
              "bases": [
                "<ast.Attribute object at 0x110ed79a0>"
              ]
            },
            {
              "name": "PerTokenRMSNorm",
              "line": 149,
              "bases": [
                "<ast.Attribute object at 0x110ed69e0>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 164,
              "bases": [
                "<ast.Attribute object at 0x110ed5d20>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 175,
              "bases": [
                "<ast.Attribute object at 0x110ed51e0>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 213,
              "bases": [
                "<ast.Attribute object at 0x110ec4bb0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 214,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult",
                "gate_bias_init",
                "gate_logit_init",
                "gate_entropy_weight"
              ]
            },
            {
              "name": "_per_head_stats",
              "line": 323,
              "args": [
                "x"
              ]
            },
            {
              "name": "__call__",
              "line": 330,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 213,
            "methods": [
              {
                "name": "__init__",
                "line": 214,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult",
                  "gate_bias_init",
                  "gate_logit_init",
                  "gate_entropy_weight"
                ]
              },
              {
                "name": "_per_head_stats",
                "line": 323,
                "args": [
                  "x"
                ]
              },
              {
                "name": "__call__",
                "line": 330,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "passed",
          "message": "No PyTorch remnants found"
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (129 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 70
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 21
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 8
            },
            {
              "pattern": "MLX module call method",
              "count": 6
            },
            {
              "pattern": "MLX array usage",
              "count": 24
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0049s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0034562500659376383,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.006252208026126027,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.016811291687190533,
              "std_time": 5.245275545536493e-05,
              "min_time": 0.016751999966800213,
              "max_time": 0.016879542032256722,
              "tokens_per_second": 951.7412640095525,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.034443930334722005,
              "std_time": 0.0026192207134558914,
              "min_time": 0.032236750004813075,
              "max_time": 0.03812370798550546,
              "tokens_per_second": 929.0461247897036,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "passed",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_hhgass_mlx.py": {
      "file_name": "delta_net_hhgass_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "_DepthwiseFIRConv1d",
              "line": 138,
              "bases": [
                "<ast.Attribute object at 0x110ec9b40>"
              ]
            },
            {
              "name": "_ShortConvolution",
              "line": 168,
              "bases": [
                "<ast.Attribute object at 0x110ec84c0>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 202,
              "bases": [
                "<ast.Attribute object at 0x110eda050>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 203,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_short",
                "fir_kernel_long",
                "fusion_hidden_mult",
                "entropy_coeff_init",
                "entropy_coeff_final",
                "entropy_decay_steps",
                "floor_init",
                "floor_final",
                "floor_decay_steps",
                "bypass_init"
              ]
            },
            {
              "name": "_current_entropy_coeff",
              "line": 333,
              "args": [
                "self"
              ]
            },
            {
              "name": "_current_floor",
              "line": 340,
              "args": [
                "self"
              ]
            },
            {
              "name": "_stats",
              "line": 348,
              "args": [
                "x"
              ]
            },
            {
              "name": "__call__",
              "line": 356,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 202,
            "methods": [
              {
                "name": "__init__",
                "line": 203,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_short",
                  "fir_kernel_long",
                  "fusion_hidden_mult",
                  "entropy_coeff_init",
                  "entropy_coeff_final",
                  "entropy_decay_steps",
                  "floor_init",
                  "floor_final",
                  "floor_decay_steps",
                  "bypass_init"
                ]
              },
              {
                "name": "_current_entropy_coeff",
                "line": 333,
                "args": [
                  "self"
                ]
              },
              {
                "name": "_current_floor",
                "line": 340,
                "args": [
                  "self"
                ]
              },
              {
                "name": "_stats",
                "line": 348,
                "args": [
                  "x"
                ]
              },
              {
                "name": "__call__",
                "line": 356,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 28,
              "match": "einops",
              "context": "*\n    \u2022 All operations are chunked for O(N) cost; einops.rearrange used throughout for memory safety and r"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (71 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 40
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 15
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 8
            },
            {
              "pattern": "MLX module call method",
              "count": 3
            },
            {
              "pattern": "MLX array usage",
              "count": 5
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0008s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0001385000068694353,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0014092909405007958,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.000389375335847338,
              "std_time": 1.8355999488939786e-05,
              "min_time": 0.0003638749476522207,
              "max_time": 0.0004063340602442622,
              "tokens_per_second": 41091.45733430097,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.00039438868407160044,
              "std_time": 1.3355282621889546e-06,
              "min_time": 0.00039249996189028025,
              "max_time": 0.00039533304516226053,
              "tokens_per_second": 81138.230614625,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_abrgf_mlx.py": {
      "file_name": "delta_net_abrgf_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "RMSNorm",
              "line": 103,
              "bases": [
                "<ast.Attribute object at 0x110ef2770>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 116,
              "bases": [
                "<ast.Attribute object at 0x110ef1ab0>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 129,
              "bases": [
                "<ast.Attribute object at 0x110ef0d00>"
              ]
            },
            {
              "name": "DepthwiseFIRConv1d",
              "line": 208,
              "bases": [
                "<ast.Attribute object at 0x110eda1a0>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 331,
              "bases": [
                "<ast.Attribute object at 0x110ee8e50>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 337,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size"
              ]
            },
            {
              "name": "_stats",
              "line": 455,
              "args": [
                "x"
              ]
            },
            {
              "name": "__call__",
              "line": 465,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 331,
            "methods": [
              {
                "name": "__init__",
                "line": 337,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size"
                ]
              },
              {
                "name": "_stats",
                "line": 455,
                "args": [
                  "x"
                ]
              },
              {
                "name": "__call__",
                "line": 465,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 6 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "F\\.(\\w+)",
              "description": "PyTorch functional usage",
              "line": 559,
              "match": "F.dropout",
              "context": "git_dropout > 0.0:\n            # MLX doesn't have F.dropout, implement basic dropout\n            if self.trai"
            },
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 36,
              "match": "einops",
              "context": "import mlx.nn as nn\n\n# Helper function to replace einops\ndef rearrange(tensor, pattern, **kwargs):\n    \"\"\""
            },
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 38,
              "match": "einops",
              "context": "arrange(tensor, pattern, **kwargs):\n    \"\"\"Simple einops replacement for common patterns used in this mode"
            },
            {
              "pattern": "from fla",
              "description": "FLA module usage",
              "line": 94,
              "match": "from fla",
              "context": "eed to be implemented separately or substituted\n# from fla.layers.utils import get_unpad_data, index_first_a"
            },
            {
              "pattern": "from fla",
              "description": "FLA module usage",
              "line": 95,
              "match": "from fla",
              "context": "ort get_unpad_data, index_first_axis, pad_input\n# from fla.modules import FusedRMSNormGated, RMSNorm, ShortC"
            },
            {
              "pattern": "from fla",
              "description": "FLA module usage",
              "line": 96,
              "match": "from fla",
              "context": "rt FusedRMSNormGated, RMSNorm, ShortConvolution\n# from fla.modules.l2norm import l2norm\n\n# Simplified replac"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (162 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 95
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 26
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 8
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 28
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0003s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.00027600000612437725,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0003915419802069664,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.0004631943302229047,
              "std_time": 7.081648183677982e-05,
              "min_time": 0.00036454107612371445,
              "max_time": 0.0005274579161778092,
              "tokens_per_second": 34542.737153756316,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0007611249651138982,
              "std_time": 2.9472932130338666e-05,
              "min_time": 0.0007196669466793537,
              "max_time": 0.0007855829317122698,
              "tokens_per_second": 42043.03033892914,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_hsgm_mlx.py": {
      "file_name": "delta_net_hsgm_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "ShortConvolution",
              "line": 119,
              "bases": [
                "<ast.Attribute object at 0x110f02920>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 153,
              "bases": [
                "<ast.Attribute object at 0x110ecff40>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 165,
              "bases": [
                "<ast.Attribute object at 0x110e6b8e0>"
              ]
            },
            {
              "name": "DepthwiseFIRConv1d",
              "line": 255,
              "bases": [
                "<ast.Attribute object at 0x110ebf8b0>"
              ]
            },
            {
              "name": "SparseGate",
              "line": 335,
              "bases": [
                "<ast.Attribute object at 0x110ee8340>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 374,
              "bases": [
                "<ast.Attribute object at 0x11148cf10>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 377,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_short_kernel",
                "fir_long_kernel",
                "fir_noise_std",
                "gate_hidden_mult",
                "gate_warm_start_bias"
              ]
            },
            {
              "name": "__call__",
              "line": 457,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 374,
            "methods": [
              {
                "name": "__init__",
                "line": 377,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_short_kernel",
                  "fir_long_kernel",
                  "fir_noise_std",
                  "gate_hidden_mult",
                  "gate_warm_start_bias"
                ]
              },
              {
                "name": "__call__",
                "line": 457,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 2 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 29,
              "match": "einops",
              "context": "nvolutions.  All tensor manipulations rely on\n   `einops.rearrange` for batch- and sequence-agnostic safet"
            },
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 47,
              "match": "einops",
              "context": "mx.array:\n    \"\"\"Manual implementation of common einops patterns\"\"\"\n    if \"b l (h d) -> b l h d\" in patt"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (147 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 93
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 16
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 8
            },
            {
              "pattern": "MLX module call method",
              "count": 6
            },
            {
              "pattern": "MLX array usage",
              "count": 24
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0007s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0007174169877544045,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0006410839268937707,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.0010199719884743292,
              "std_time": 0.00011939475982862286,
              "min_time": 0.0008557499386370182,
              "max_time": 0.0011360830394551158,
              "tokens_per_second": 15686.705302498305,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0010776803052673738,
              "std_time": 3.5959677311350267e-06,
              "min_time": 0.0010731250513345003,
              "max_time": 0.0010819159215316176,
              "tokens_per_second": 29693.407074058723,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_ms_hsm_widefloor_mlx.py": {
      "file_name": "delta_net_ms_hsm_widefloor_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 86,
              "bases": [
                "<ast.Attribute object at 0x110e6aa10>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 179,
              "bases": [
                "<ast.Attribute object at 0x110e641f0>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 190,
              "bases": [
                "<ast.Attribute object at 0x110eeada0>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 201,
              "bases": [
                "<ast.Attribute object at 0x110eea020>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 221,
              "bases": [
                "<ast.Attribute object at 0x110eeb8e0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 222,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 308,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 221,
            "methods": [
              {
                "name": "__init__",
                "line": 222,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 308,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (117 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 72
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 10
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 26
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0002s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.0001711660297587514,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00017433299217373133,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.000204027669193844,
              "std_time": 2.36670599648541e-05,
              "min_time": 0.0001706660259515047,
              "max_time": 0.00022304197773337364,
              "tokens_per_second": 78420.73608554834,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0003223190239320199,
              "std_time": 2.0268148338810165e-05,
              "min_time": 0.0002970830537378788,
              "max_time": 0.00034670799504965544,
              "tokens_per_second": 99280.51906346397,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_hybfloor_mlx.py": {
      "file_name": "delta_net_hybfloor_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "_DepthwiseFIRConv1d",
              "line": 118,
              "bases": [
                "<ast.Attribute object at 0x110e3d4b0>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 198,
              "bases": [
                "<ast.Attribute object at 0x110ec13c0>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 207,
              "bases": [
                "<ast.Attribute object at 0x110ec08b0>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 217,
              "bases": [
                "<ast.Attribute object at 0x110f0dae0>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 262,
              "bases": [
                "<ast.Attribute object at 0x110ec5330>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 265,
              "args": [
                "self"
              ]
            },
            {
              "name": "_stats4",
              "line": 385,
              "args": [
                "t"
              ]
            },
            {
              "name": "__call__",
              "line": 395,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 262,
            "methods": [
              {
                "name": "__init__",
                "line": 265,
                "args": [
                  "self"
                ]
              },
              {
                "name": "_stats4",
                "line": 385,
                "args": [
                  "t"
                ]
              },
              {
                "name": "__call__",
                "line": 395,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 60,
              "match": "einops",
              "context": "ef rearrange(x, pattern, **kwargs):\n    \"\"\"Simple einops rearrange replacement for MLX arrays\"\"\"\n    if \"b"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (122 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 68
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 15
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 10
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 24
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0350s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.02097933308687061,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.049052583053708076,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.11882743064779788,
              "std_time": 0.01906161165808895,
              "min_time": 0.09215416701044887,
              "max_time": 0.1355434579309076,
              "tokens_per_second": 134.6490445242705,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.3295581113391866,
              "std_time": 0.03165412578448062,
              "min_time": 0.28576929203700274,
              "max_time": 0.359507333021611,
              "tokens_per_second": 97.0997189842039,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_amf_routing_mlx.py": {
      "file_name": "delta_net_amf_routing_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseAdaptiveMultiScaleFIR",
              "line": 118,
              "bases": [
                "<ast.Attribute object at 0x110ec6800>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 171,
              "bases": [
                "<ast.Attribute object at 0x110e68100>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 173,
              "args": [
                "self"
              ]
            },
            {
              "name": "_apply_short_conv",
              "line": 264,
              "args": [
                "self",
                "x",
                "weight"
              ]
            },
            {
              "name": "__call__",
              "line": 282,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 171,
            "methods": [
              {
                "name": "__init__",
                "line": 173,
                "args": [
                  "self"
                ]
              },
              {
                "name": "_apply_short_conv",
                "line": 264,
                "args": [
                  "self",
                  "x",
                  "weight"
                ]
              },
              {
                "name": "__call__",
                "line": 282,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 2 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 20,
              "match": "einops",
              "context": "ly Batch-agnostic / Chunked**: All operations use einops for reshaping and chunked implementations for mem"
            },
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 50,
              "match": "einops",
              "context": "attern: str, **kwargs) -> mx.array:\n    \"\"\"Simple einops rearrange replacement for common patterns\"\"\""
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (113 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 71
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 17
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 2
            },
            {
              "pattern": "MLX array usage",
              "count": 19
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0003s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0002092499053105712,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.00036829104647040367,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.0002547639887779951,
              "std_time": 5.7017467337938794e-05,
              "min_time": 0.00017991696950048208,
              "max_time": 0.00031816691625863314,
              "tokens_per_second": 62803.224571674546,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.00040458325141419965,
              "std_time": 2.194579129498059e-05,
              "min_time": 0.0003738749073818326,
              "max_time": 0.0004238329129293561,
              "tokens_per_second": 79093.73383140718,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_tarf_mlx.py": {
      "file_name": "delta_net_tarf_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 84,
              "bases": [
                "<ast.Attribute object at 0x110f024d0>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 186,
              "bases": [
                "<ast.Attribute object at 0x110e949d0>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 197,
              "bases": [
                "<ast.Attribute object at 0x110e96740>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 208,
              "bases": [
                "<ast.Attribute object at 0x110e97730>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 247,
              "bases": [
                "<ast.Attribute object at 0x11145c3a0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 248,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 334,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 247,
            "methods": [
              {
                "name": "__init__",
                "line": 248,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 334,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (133 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 85
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 13
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 26
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0003s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.0002600839361548424,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.0003749580355361104,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00045063897656897706,
              "std_time": 6.046751319371291e-05,
              "min_time": 0.0003715419443324208,
              "max_time": 0.000518333981744945,
              "tokens_per_second": 35505.14010532101,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0008716529700905085,
              "std_time": 8.639012691072609e-05,
              "min_time": 0.0007569169392809272,
              "max_time": 0.0009653749875724316,
              "tokens_per_second": 36711.857927447054,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_crdg_mlx.py": {
      "file_name": "delta_net_crdg_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "_ShortConvolution",
              "line": 119,
              "bases": [
                "<ast.Attribute object at 0x110e3ed40>"
              ]
            },
            {
              "name": "_DepthwiseFIRConv1d",
              "line": 151,
              "bases": [
                "<ast.Attribute object at 0x110e3d5d0>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 235,
              "bases": [
                "<ast.Attribute object at 0x110eeaef0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 238,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_short",
                "fir_kernel_long",
                "fusion_hidden_mult",
                "gate_bias_init",
                "gate_logit_init",
                "path_dropout",
                "residual_conv_init"
              ]
            },
            {
              "name": "_per_head_stats",
              "line": 350,
              "args": [
                "x"
              ]
            },
            {
              "name": "__call__",
              "line": 360,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 235,
            "methods": [
              {
                "name": "__init__",
                "line": 238,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_short",
                  "fir_kernel_long",
                  "fusion_hidden_mult",
                  "gate_bias_init",
                  "gate_logit_init",
                  "path_dropout",
                  "residual_conv_init"
                ]
              },
              {
                "name": "_per_head_stats",
                "line": 350,
                "args": [
                  "x"
                ]
              },
              {
                "name": "__call__",
                "line": 360,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 65,
              "match": "einops",
              "context": "attern: str, **kwargs) -> mx.array:\n    \"\"\"Simple einops rearrange replacement for common patterns\"\"\""
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (94 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 48
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 12
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 7
            },
            {
              "pattern": "MLX module call method",
              "count": 3
            },
            {
              "pattern": "MLX array usage",
              "count": 24
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0003s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0003150410484522581,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0002781669609248638,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00032708335978289443,
              "std_time": 4.781743752500145e-05,
              "min_time": 0.000259542022831738,
              "max_time": 0.0003637500340119004,
              "tokens_per_second": 48917.19349654533,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.00035302732915927965,
              "std_time": 4.964638883000345e-06,
              "min_time": 0.00034604105167090893,
              "max_time": 0.0003571249544620514,
              "tokens_per_second": 90644.5403992,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_oahmgr_mlx.py": {
      "file_name": "delta_net_oahmgr_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 87,
              "bases": [
                "<ast.Attribute object at 0x110f16740>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 186,
              "bases": [
                "<ast.Attribute object at 0x110e96bf0>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 197,
              "bases": [
                "<ast.Attribute object at 0x110e95000>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 208,
              "bases": [
                "<ast.Attribute object at 0x110e973a0>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 228,
              "bases": [
                "<ast.Attribute object at 0x110d7fca0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 229,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 315,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 228,
            "methods": [
              {
                "name": "__init__",
                "line": 229,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 315,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (124 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 79
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 10
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 26
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0002s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00016900000628083944,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00018729199655354023,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00021419398641834655,
              "std_time": 2.801665588562801e-05,
              "min_time": 0.0001765829510986805,
              "max_time": 0.00024379102978855371,
              "tokens_per_second": 74698.64242010082,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0003156252981474002,
              "std_time": 7.805175972171536e-06,
              "min_time": 0.000304708955809474,
              "max_time": 0.00032249989453703165,
              "tokens_per_second": 101386.04284202744,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_afef_mlx.py": {
      "file_name": "delta_net_afef_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "_DepthwiseFIRConv1d",
              "line": 98,
              "bases": [
                "<ast.Attribute object at 0x110f08190>"
              ]
            },
            {
              "name": "_AdaptiveFloorGate",
              "line": 238,
              "bases": [
                "<ast.Attribute object at 0x110f03130>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 372,
              "bases": [
                "<ast.Attribute object at 0x1114dd750>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 375,
              "args": [
                "self"
              ]
            },
            {
              "name": "_simple_conv1d",
              "line": 472,
              "args": [
                "self",
                "x",
                "weight"
              ]
            },
            {
              "name": "__call__",
              "line": 490,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 372,
            "methods": [
              {
                "name": "__init__",
                "line": 375,
                "args": [
                  "self"
                ]
              },
              {
                "name": "_simple_conv1d",
                "line": 472,
                "args": [
                  "self",
                  "x",
                  "weight"
                ]
              },
              {
                "name": "__call__",
                "line": 490,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 4 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "torch\\.",
              "description": "PyTorch module usage",
              "line": 28,
              "match": "torch.",
              "context": "to MLX framework\n- Uses mlx.nn modules instead of torch.nn\n- Simplified some operations for MLX compatibil"
            },
            {
              "pattern": "torch\\.",
              "description": "PyTorch module usage",
              "line": 30,
              "match": "torch.",
              "context": "some operations for MLX compatibility\n- Removed @torch.compile decorators (MLX handles optimization diffe"
            },
            {
              "pattern": "@torch\\.compile",
              "description": "PyTorch compile decorator",
              "line": 30,
              "match": "@torch.compile",
              "context": "d some operations for MLX compatibility\n- Removed @torch.compile decorators (MLX handles optimization differently)"
            },
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 45,
              "match": "einops",
              "context": "attern: str, **kwargs) -> mx.array:\n    \"\"\"Simple einops rearrange replacement for common patterns\"\"\""
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (146 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 92
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 16
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 5
            },
            {
              "pattern": "MLX module call method",
              "count": 3
            },
            {
              "pattern": "MLX array usage",
              "count": 30
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0115s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.02129633305594325,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0017216670094057918,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.0015451109890515606,
              "std_time": 4.07175369353157e-05,
              "min_time": 0.00150712497998029,
              "max_time": 0.001601582975126803,
              "tokens_per_second": 10355.24315947123,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0022118887087951102,
              "std_time": 1.5400371564511433e-05,
              "min_time": 0.0021951660746708512,
              "max_time": 0.0022323339944705367,
              "tokens_per_second": 14467.273996543647,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_pfr_mlx.py": {
      "file_name": "delta_net_pfr_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 100,
              "bases": [
                "<ast.Attribute object at 0x110f0c640>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 200,
              "bases": [
                "<ast.Attribute object at 0x110ec2e90>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 211,
              "bases": [
                "<ast.Attribute object at 0x110ec0eb0>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 222,
              "bases": [
                "<ast.Attribute object at 0x110ec2290>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 242,
              "bases": [
                "<ast.Attribute object at 0x110e96d10>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 245,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult",
                "gate_bias_init",
                "gate_logit_init",
                "floor_init",
                "floor_final",
                "floor_decay",
                "conv_residual_init",
                "entropy_target",
                "entropy_coeff"
              ]
            },
            {
              "name": "_per_head_stats",
              "line": 373,
              "args": [
                "x"
              ]
            },
            {
              "name": "__call__",
              "line": 384,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 242,
            "methods": [
              {
                "name": "__init__",
                "line": 245,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult",
                  "gate_bias_init",
                  "gate_logit_init",
                  "floor_init",
                  "floor_final",
                  "floor_decay",
                  "conv_residual_init",
                  "entropy_target",
                  "entropy_coeff"
                ]
              },
              {
                "name": "_per_head_stats",
                "line": 373,
                "args": [
                  "x"
                ]
              },
              {
                "name": "__call__",
                "line": 384,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 13,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (161 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 94
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 22
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 9
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 31
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0008s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.00025450007524341345,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0013035830343142152,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.0005598059700181087,
              "std_time": 9.163534799967937e-06,
              "min_time": 0.000546916970051825,
              "max_time": 0.0005674170097336173,
              "tokens_per_second": 28581.331491485216,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0006916807033121586,
              "std_time": 5.868763752306794e-05,
              "min_time": 0.00064904207829386,
              "max_time": 0.0007746670162305236,
              "tokens_per_second": 46264.121359416116,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_ddfsanr_mlx.py": {
      "file_name": "delta_net_ddfsanr_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 84,
              "bases": [
                "<ast.Attribute object at 0x110edac80>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 175,
              "bases": [
                "<ast.Attribute object at 0x110ecc790>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 186,
              "bases": [
                "<ast.Attribute object at 0x110e95b10>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 197,
              "bases": [
                "<ast.Attribute object at 0x110e946a0>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 217,
              "bases": [
                "<ast.Attribute object at 0x110e951b0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 218,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 304,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 217,
            "methods": [
              {
                "name": "__init__",
                "line": 218,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 304,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (116 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 72
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 9
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 26
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0002s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.0002317089820280671,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.0002460830146446824,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00017505569849163294,
              "std_time": 1.774839900979989e-05,
              "min_time": 0.00014995899982750416,
              "max_time": 0.00018795800860971212,
              "tokens_per_second": 91399.4810672487,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.00027627804471800726,
              "std_time": 9.541173608248094e-06,
              "min_time": 0.0002630420494824648,
              "max_time": 0.0002851670142263174,
              "tokens_per_second": 115825.3455596224,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_aeoc_mlx.py": {
      "file_name": "delta_net_aeoc_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "mlx.core",
            "mlx.nn",
            "typing",
            "math",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "_ShortConvolution",
              "line": 83,
              "bases": [
                "<ast.Attribute object at 0x110ec1210>"
              ]
            },
            {
              "name": "_DepthwiseFIRConv1d",
              "line": 214,
              "bases": [
                "<ast.Attribute object at 0x110eea590>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 240,
              "bases": [
                "<ast.Attribute object at 0x110f00f10>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 243,
              "args": [
                "self"
              ]
            },
            {
              "name": "__call__",
              "line": 354,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 240,
            "methods": [
              {
                "name": "__init__",
                "line": 243,
                "args": [
                  "self"
                ]
              },
              {
                "name": "__call__",
                "line": 354,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 2 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "attern: str, **kwargs) -> mx.array:\n    \"\"\"Simple einops rearrange replacement for common patterns\"\"\""
            },
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 148,
              "match": "einops",
              "context": "nked delta memory, FIR depthwise convolutions and einops for all tensor reshaping.\n   - Strictly maintains"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (90 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 50
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 12
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 3
            },
            {
              "pattern": "MLX module call method",
              "count": 3
            },
            {
              "pattern": "MLX array usage",
              "count": 22
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0003s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0002477500820532441,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0002862920518964529,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.0003319446307917436,
              "std_time": 4.4879827940357815e-05,
              "min_time": 0.000268499949015677,
              "max_time": 0.00036520895082503557,
              "tokens_per_second": 48200.809761065626,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.00048566671709219616,
              "std_time": 1.1539033512380563e-05,
              "min_time": 0.0004693750524893403,
              "max_time": 0.0004946250701323152,
              "tokens_per_second": 65888.80578762268,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_qsr_mlx.py": {
      "file_name": "delta_net_qsr_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 84,
              "bases": [
                "<ast.Attribute object at 0x110ea9960>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 174,
              "bases": [
                "<ast.Attribute object at 0x110e96440>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 185,
              "bases": [
                "<ast.Attribute object at 0x110e95f90>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 196,
              "bases": [
                "<ast.Attribute object at 0x110e97eb0>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 216,
              "bases": [
                "<ast.Attribute object at 0x110d7f430>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 217,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 303,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 216,
            "methods": [
              {
                "name": "__init__",
                "line": 217,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 303,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (116 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 71
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 10
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 26
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0002s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00016429205425083637,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00018274993635714054,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.0002063052961602807,
              "std_time": 2.086878279149181e-05,
              "min_time": 0.00017775001469999552,
              "max_time": 0.00022704096045345068,
              "tokens_per_second": 77554.96488839257,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.000311597289207081,
              "std_time": 1.1275238978232209e-05,
              "min_time": 0.00029566697776317596,
              "max_time": 0.0003201669314876199,
              "tokens_per_second": 102696.6572187779,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_cagf_br_mlx.py": {
      "file_name": "delta_net_cagf_br_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 85,
              "bases": [
                "<ast.Attribute object at 0x110ec0b50>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 174,
              "bases": [
                "<ast.Attribute object at 0x110e946d0>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 185,
              "bases": [
                "<ast.Attribute object at 0x1114ea9e0>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 196,
              "bases": [
                "<ast.Attribute object at 0x11144fd00>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 216,
              "bases": [
                "<ast.Attribute object at 0x11144e5f0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 219,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult",
                "gate_temp",
                "conv_path_floor"
              ]
            },
            {
              "name": "__call__",
              "line": 317,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 216,
            "methods": [
              {
                "name": "__init__",
                "line": 219,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult",
                  "gate_temp",
                  "conv_path_floor"
                ]
              },
              {
                "name": "__call__",
                "line": 317,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 13,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (118 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 71
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 10
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 5
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 27
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0002s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.0002377919154241681,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.000248334021307528,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00018293030249575773,
              "std_time": 1.9632668894228927e-05,
              "min_time": 0.0001551660243421793,
              "max_time": 0.00019695796072483063,
              "tokens_per_second": 87465.0059706267,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0002937500054637591,
              "std_time": 1.5518317590460552e-05,
              "min_time": 0.00027241604402661324,
              "max_time": 0.0003088749945163727,
              "tokens_per_second": 108936.16818654984,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_hwg_mlx.py": {
      "file_name": "delta_net_hwg_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 105,
              "bases": [
                "<ast.Attribute object at 0x110e3ece0>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 159,
              "bases": [
                "<ast.Attribute object at 0x110f021d0>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 203,
              "bases": [
                "<ast.Attribute object at 0x110ee9b70>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 206,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_short_kernel",
                "fir_long_kernel",
                "fusion_warm_start_bias"
              ]
            },
            {
              "name": "_rms_norm",
              "line": 305,
              "args": [
                "self",
                "x"
              ]
            },
            {
              "name": "__call__",
              "line": 309,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 203,
            "methods": [
              {
                "name": "__init__",
                "line": 206,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_short_kernel",
                  "fir_long_kernel",
                  "fusion_warm_start_bias"
                ]
              },
              {
                "name": "_rms_norm",
                "line": 305,
                "args": [
                  "self",
                  "x"
                ]
              },
              {
                "name": "__call__",
                "line": 309,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "passed",
          "message": "No PyTorch remnants found"
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (87 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 53
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 11
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 3
            },
            {
              "pattern": "MLX module call method",
              "count": 3
            },
            {
              "pattern": "MLX array usage",
              "count": 17
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0002s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.00016479194164276123,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.00025204208213835955,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.0003039030125364661,
              "std_time": 4.369039775489808e-05,
              "min_time": 0.00024229194968938828,
              "max_time": 0.00033875007648020983,
              "tokens_per_second": 52648.37576455455,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0005665277130901814,
              "std_time": 3.3423968821449296e-05,
              "min_time": 0.0005194160621613264,
              "max_time": 0.0005934169748798013,
              "tokens_per_second": 56484.438908474294,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "passed",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_selm_mlx.py": {
      "file_name": "delta_net_selm_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 117,
              "bases": [
                "<ast.Attribute object at 0x110f16680>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 178,
              "bases": [
                "<ast.Attribute object at 0x110f141c0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 187,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_large_kernel",
                "fir_small_kernel",
                "fusion_hidden_mult",
                "gate_init_temp"
              ]
            },
            {
              "name": "__call__",
              "line": 304,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 178,
            "methods": [
              {
                "name": "__init__",
                "line": 187,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_large_kernel",
                  "fir_small_kernel",
                  "fusion_hidden_mult",
                  "gate_init_temp"
                ]
              },
              {
                "name": "__call__",
                "line": 304,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 2 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 28,
              "match": "einops",
              "context": "nt, O(N)).\n\n5. **Batch & Sequence Agnostic**\n   - einops.rearrange used everywhere for robust shape handli"
            },
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 46,
              "match": "einops",
              "context": "arrange(tensor, pattern, **kwargs):\n    \"\"\"Simple einops rearrange replacement for MLX arrays\"\"\"\n    if \"."
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (61 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 34
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 14
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 6
            },
            {
              "pattern": "MLX module call method",
              "count": 2
            },
            {
              "pattern": "MLX array usage",
              "count": 5
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0001s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 8.26249597594142e-05,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 7.491698488593102e-05,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 8.793070446699858e-05,
              "std_time": 1.0450962414549778e-05,
              "min_time": 7.320800796151161e-05,
              "max_time": 9.641703218221664e-05,
              "tokens_per_second": 181961.46723702172,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 9.562536918868621e-05,
              "std_time": 1.1216299361953863e-06,
              "min_time": 9.404204320162535e-05,
              "max_time": 9.650003630667925e-05,
              "tokens_per_second": 334639.23090177245,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_mfg_mlx.py": {
      "file_name": "delta_net_mfg_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 84,
              "bases": [
                "<ast.Attribute object at 0x110f02bf0>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 180,
              "bases": [
                "<ast.Attribute object at 0x110eeb1c0>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 191,
              "bases": [
                "<ast.Attribute object at 0x110e97a60>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 202,
              "bases": [
                "<ast.Attribute object at 0x110e94490>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 222,
              "bases": [
                "<ast.Attribute object at 0x110e95600>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 223,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 309,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 222,
            "methods": [
              {
                "name": "__init__",
                "line": 223,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 309,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (118 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 73
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 10
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 26
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0001s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00012983393389731646,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.000150916981510818,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.0001799723831936717,
              "std_time": 2.3698272998856996e-05,
              "min_time": 0.00014645804185420275,
              "max_time": 0.00019679206889122725,
              "tokens_per_second": 88902.52891068345,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0002760836699356635,
              "std_time": 1.267638789385663e-05,
              "min_time": 0.00025825004559010267,
              "max_time": 0.00028658402152359486,
              "tokens_per_second": 115906.8915863696,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_hgm_ident_mlx.py": {
      "file_name": "delta_net_hgm_ident_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "math",
            "typing",
            "mlx.core",
            "mlx.nn",
            "typing"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseCausalConv1d",
              "line": 128,
              "bases": [
                "<ast.Attribute object at 0x110f0ab00>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 151,
              "bases": [
                "<ast.Attribute object at 0x110f09840>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 161,
              "bases": [
                "<ast.Attribute object at 0x110f08ca0>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 171,
              "bases": [
                "<ast.Attribute object at 0x110ec4ac0>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 209,
              "bases": [
                "<ast.Attribute object at 0x110ee8820>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 212,
              "args": [
                "self"
              ]
            },
            {
              "name": "_branch_stats",
              "line": 306,
              "args": [
                "x"
              ]
            },
            {
              "name": "__call__",
              "line": 312,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 209,
            "methods": [
              {
                "name": "__init__",
                "line": 212,
                "args": [
                  "self"
                ]
              },
              {
                "name": "_branch_stats",
                "line": 306,
                "args": [
                  "x"
                ]
              },
              {
                "name": "__call__",
                "line": 312,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 2 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 29,
              "match": "einops",
              "context": "e strictly causal.\n   - All tensor operations use einops.rearrange, never .view or .reshape, with pure sha"
            },
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 45,
              "match": "einops",
              "context": "pattern, **kwargs):\n    \"\"\"Simple replacement for einops rearrange for common patterns\"\"\"\n    if \"b l (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (107 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 57
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 15
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 6
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 24
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0001s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 9.345810394734144e-05,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 9.80000477284193e-05,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00010930529485146205,
              "std_time": 1.7392558997318505e-05,
              "min_time": 8.520798292011023e-05,
              "max_time": 0.00012562493793666363,
              "tokens_per_second": 146379.00224085976,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.00011333295454581578,
              "std_time": 2.2826552464728577e-06,
              "min_time": 0.0001101659145206213,
              "max_time": 0.0001154579222202301,
              "tokens_per_second": 282353.8848717099,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_mscmix_pointwise_mlx.py": {
      "file_name": "delta_net_mscmix_pointwise_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 84,
              "bases": [
                "<ast.Attribute object at 0x110f16c80>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 180,
              "bases": [
                "<ast.Attribute object at 0x110e3c850>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 191,
              "bases": [
                "<ast.Attribute object at 0x110e969e0>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 202,
              "bases": [
                "<ast.Attribute object at 0x110e97dc0>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 222,
              "bases": [
                "<ast.Attribute object at 0x110e96230>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 223,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 309,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 222,
            "methods": [
              {
                "name": "__init__",
                "line": 223,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 309,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (118 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 73
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 10
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 26
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0001s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00012737500946968794,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00015950005035847425,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00017972197383642197,
              "std_time": 2.3805358827713446e-05,
              "min_time": 0.0001460830681025982,
              "max_time": 0.00019770790822803974,
              "tokens_per_second": 89026.39815520144,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0002761109887311856,
              "std_time": 1.2289895947273834e-05,
              "min_time": 0.00025887496303766966,
              "max_time": 0.000286665977910161,
              "tokens_per_second": 115895.42360139225,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_acfg_mlx.py": {
      "file_name": "delta_net_acfg_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 106,
              "bases": [
                "<ast.Attribute object at 0x110ef16c0>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 162,
              "bases": [
                "<ast.Attribute object at 0x110ec55d0>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 176,
              "bases": [
                "<ast.Attribute object at 0x110ec4b80>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 208,
              "bases": [
                "<ast.Attribute object at 0x110eea740>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 211,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_short_kernel",
                "fir_long_kernel",
                "context_max_floor",
                "fusion_hidden_mult",
                "value_bias_init"
              ]
            },
            {
              "name": "__call__",
              "line": 322,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 208,
            "methods": [
              {
                "name": "__init__",
                "line": 211,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_short_kernel",
                  "fir_long_kernel",
                  "context_max_floor",
                  "fusion_hidden_mult",
                  "value_bias_init"
                ]
              },
              {
                "name": "__call__",
                "line": 322,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "passed",
          "message": "No PyTorch remnants found"
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (81 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 46
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 11
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 6
            },
            {
              "pattern": "MLX module call method",
              "count": 4
            },
            {
              "pattern": "MLX array usage",
              "count": 14
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0017s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0011882089311257005,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0021193749271333218,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.004751888957495491,
              "std_time": 0.0007023281369084038,
              "min_time": 0.0037612079177051783,
              "max_time": 0.005308958934620023,
              "tokens_per_second": 3367.0820473955027,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.009354333005224666,
              "std_time": 0.0006325449405134579,
              "min_time": 0.00846383289899677,
              "max_time": 0.009873250033706427,
              "tokens_per_second": 3420.874581023262,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "passed",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_msfr_mn_mlx.py": {
      "file_name": "delta_net_msfr_mn_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 84,
              "bases": [
                "<ast.Attribute object at 0x110ecec20>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 180,
              "bases": [
                "<ast.Attribute object at 0x110ed8a90>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 191,
              "bases": [
                "<ast.Attribute object at 0x110e97f40>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 202,
              "bases": [
                "<ast.Attribute object at 0x110e97910>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 222,
              "bases": [
                "<ast.Attribute object at 0x110e94460>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 223,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 309,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 222,
            "methods": [
              {
                "name": "__init__",
                "line": 223,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 309,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (118 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 73
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 10
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 26
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0002s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00016866601072251797,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00019387505017220974,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00018095830455422401,
              "std_time": 2.5468471053560342e-05,
              "min_time": 0.0001449589617550373,
              "max_time": 0.00019995798356831074,
              "tokens_per_second": 88418.15820177301,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.00028663896955549717,
              "std_time": 1.4260104827297649e-05,
              "min_time": 0.00026662496384233236,
              "max_time": 0.0002987920306622982,
              "tokens_per_second": 111638.69326499365,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_hafs_mlx.py": {
      "file_name": "delta_net_hafs_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 84,
              "bases": [
                "<ast.Attribute object at 0x110f0ebf0>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 175,
              "bases": [
                "<ast.Attribute object at 0x110e3f400>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 186,
              "bases": [
                "<ast.Attribute object at 0x110e948e0>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 197,
              "bases": [
                "<ast.Attribute object at 0x110e962f0>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 217,
              "bases": [
                "<ast.Attribute object at 0x110e954b0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 218,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 304,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 217,
            "methods": [
              {
                "name": "__init__",
                "line": 218,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 304,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (116 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 72
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 9
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 26
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0003s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.0002441250253468752,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00026520807296037674,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00018195831216871738,
              "std_time": 2.2116361333859057e-05,
              "min_time": 0.00015070801600813866,
              "max_time": 0.0001987079158425331,
              "tokens_per_second": 87932.2291424879,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0002902496683721741,
              "std_time": 9.967009054781759e-06,
              "min_time": 0.00027716602198779583,
              "max_time": 0.0003013330278918147,
              "tokens_per_second": 110249.91063544589,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_ms_hsm_tempgate_mlx.py": {
      "file_name": "delta_net_ms_hsm_tempgate_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 84,
              "bases": [
                "<ast.Attribute object at 0x110f14070>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 175,
              "bases": [
                "<ast.Attribute object at 0x110e95720>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 186,
              "bases": [
                "<ast.Attribute object at 0x110e960b0>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 197,
              "bases": [
                "<ast.Attribute object at 0x110e94340>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 217,
              "bases": [
                "<ast.Attribute object at 0x110d7f820>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 218,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 304,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 217,
            "methods": [
              {
                "name": "__init__",
                "line": 218,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 304,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (116 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 72
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 9
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 26
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0003s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.0002637500874698162,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00025220902170985937,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00017876395334800085,
              "std_time": 1.9110055467103636e-05,
              "min_time": 0.00015174993313848972,
              "max_time": 0.0001929589780047536,
              "tokens_per_second": 89503.50280547167,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0002916666368643443,
              "std_time": 1.5510164075893194e-05,
              "min_time": 0.0002703330246731639,
              "max_time": 0.0003067499492317438,
              "tokens_per_second": 109714.29692482576,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_sigf_ptu_mlx.py": {
      "file_name": "delta_net_sigf_ptu_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 84,
              "bases": [
                "<ast.Attribute object at 0x110f16c20>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 175,
              "bases": [
                "<ast.Attribute object at 0x110ec3160>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 186,
              "bases": [
                "<ast.Attribute object at 0x110e97a30>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 197,
              "bases": [
                "<ast.Attribute object at 0x110e97c10>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 217,
              "bases": [
                "<ast.Attribute object at 0x110e94a90>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 218,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 304,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 217,
            "methods": [
              {
                "name": "__init__",
                "line": 218,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 304,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (116 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 72
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 9
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 26
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0002s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00022175000049173832,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.0002389579312875867,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00018051371444016695,
              "std_time": 2.3883199426998144e-05,
              "min_time": 0.0001479580532759428,
              "max_time": 0.00020458304788917303,
              "tokens_per_second": 88635.924697585,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0002848609971503417,
              "std_time": 1.2885690402432785e-05,
              "min_time": 0.00026666594203561544,
              "max_time": 0.00029483402613550425,
              "tokens_per_second": 112335.49106447624,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_mafr_mlx.py": {
      "file_name": "delta_net_mafr_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 84,
              "bases": [
                "<ast.Attribute object at 0x110f0ac50>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 180,
              "bases": [
                "<ast.Attribute object at 0x110e3d450>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 191,
              "bases": [
                "<ast.Attribute object at 0x110e96500>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 202,
              "bases": [
                "<ast.Attribute object at 0x110e94a30>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 222,
              "bases": [
                "<ast.Attribute object at 0x110e96aa0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 223,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 309,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 222,
            "methods": [
              {
                "name": "__init__",
                "line": 223,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 309,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (117 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 73
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 9
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 26
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0005s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.0002727910177782178,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.000743458978831768,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.0008329170135160288,
              "std_time": 0.00012102605404985199,
              "min_time": 0.0006647499976679683,
              "max_time": 0.0009445840260013938,
              "tokens_per_second": 19209.59680299782,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.002883375040255487,
              "std_time": 0.0002779997521852125,
              "min_time": 0.0024922500597313046,
              "max_time": 0.003113458980806172,
              "tokens_per_second": 11098.105363763078,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_acmg_mlx.py": {
      "file_name": "delta_net_acmg_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 103,
              "bases": [
                "<ast.Attribute object at 0x110ec58d0>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 161,
              "bases": [
                "<ast.Attribute object at 0x110ea2bf0>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 196,
              "bases": [
                "<ast.Attribute object at 0x110ea0ca0>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 207,
              "bases": [
                "<ast.Attribute object at 0x110ea0070>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 222,
              "bases": [
                "<ast.Attribute object at 0x110ee9300>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 225,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_short",
                "fir_kernel_long",
                "fusion_hidden_mult",
                "gate_dropout",
                "min_local_weight_base",
                "gate_bias_init",
                "gate_logit_init"
              ]
            },
            {
              "name": "__call__",
              "line": 327,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 222,
            "methods": [
              {
                "name": "__init__",
                "line": 225,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_short",
                  "fir_kernel_long",
                  "fusion_hidden_mult",
                  "gate_dropout",
                  "min_local_weight_base",
                  "gate_bias_init",
                  "gate_logit_init"
                ]
              },
              {
                "name": "__call__",
                "line": 327,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "passed",
          "message": "No PyTorch remnants found"
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (101 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 51
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 11
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 5
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 29
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0001s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.00011012505274266005,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.000134957954287529,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.0001434447088589271,
              "std_time": 1.8419522286781197e-05,
              "min_time": 0.00011741707567125559,
              "max_time": 0.0001573750050738454,
              "tokens_per_second": 111541.2351370551,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.00022818066645413637,
              "std_time": 8.539978994870574e-06,
              "min_time": 0.00021612492855638266,
              "max_time": 0.00023483403492718935,
              "tokens_per_second": 140239.7516725279,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "passed",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_aegf_br_mlx.py": {
      "file_name": "delta_net_aegf_br_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "RMSNorm",
              "line": 96,
              "bases": [
                "<ast.Attribute object at 0x110ec3370>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 109,
              "bases": [
                "<ast.Attribute object at 0x110ec2fe0>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 125,
              "bases": [
                "<ast.Attribute object at 0x110ec09d0>"
              ]
            },
            {
              "name": "_DepthwiseFIRConv1d",
              "line": 157,
              "bases": [
                "<ast.Attribute object at 0x110f0cf40>"
              ]
            },
            {
              "name": "_AnnealedFusionGate",
              "line": 235,
              "bases": [
                "<ast.Attribute object at 0x110ec7970>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 354,
              "bases": [
                "<ast.Attribute object at 0x1114305b0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 357,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult",
                "fusion_floor_start",
                "fusion_floor_end",
                "fusion_entropy_weight",
                "fusion_kl_weight",
                "anneal_steps",
                "gate_bias_init",
                "temp_init",
                "conv_residual_init"
              ]
            },
            {
              "name": "_per_head_stats",
              "line": 483,
              "args": [
                "x"
              ]
            },
            {
              "name": "__call__",
              "line": 493,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 354,
            "methods": [
              {
                "name": "__init__",
                "line": 357,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult",
                  "fusion_floor_start",
                  "fusion_floor_end",
                  "fusion_entropy_weight",
                  "fusion_kl_weight",
                  "anneal_steps",
                  "gate_bias_init",
                  "temp_init",
                  "conv_residual_init"
                ]
              },
              {
                "name": "_per_head_stats",
                "line": 483,
                "args": [
                  "x"
                ]
              },
              {
                "name": "__call__",
                "line": 493,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 38,
              "match": "einops",
              "context": "attern: str, **kwargs) -> mx.array:\n    \"\"\"Simple einops rearrange replacement for common patterns\"\"\""
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (155 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 90
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 18
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 9
            },
            {
              "pattern": "MLX module call method",
              "count": 6
            },
            {
              "pattern": "MLX array usage",
              "count": 32
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0092s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.005866416962817311,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.012550499988719821,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.016013444362518687,
              "std_time": 0.00015745415495746454,
              "min_time": 0.01584533299319446,
              "max_time": 0.01622395811136812,
              "tokens_per_second": 999.1604328079376,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.056157152711724244,
              "std_time": 0.03452087401391114,
              "min_time": 0.03159124997910112,
              "max_time": 0.1049767080694437,
              "tokens_per_second": 569.8294599134686,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_hefth_mlx.py": {
      "file_name": "delta_net_hefth_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "_DepthwiseFIRConv1d",
              "line": 65,
              "bases": [
                "<ast.Attribute object at 0x1114c7d90>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 138,
              "bases": [
                "<ast.Attribute object at 0x110eeb0a0>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 149,
              "bases": [
                "<ast.Attribute object at 0x110eea500>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 163,
              "bases": [
                "<ast.Attribute object at 0x110ee9870>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 198,
              "bases": [
                "<ast.Attribute object at 0x110ef0280>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 201,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult",
                "epsilon_floor_init",
                "epsilon_anneal_steps",
                "enable_head_mixer",
                "length_scale"
              ]
            },
            {
              "name": "_current_epsilon",
              "line": 330,
              "args": [
                "self"
              ]
            },
            {
              "name": "__call__",
              "line": 339,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 198,
            "methods": [
              {
                "name": "__init__",
                "line": 201,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult",
                  "epsilon_floor_init",
                  "epsilon_anneal_steps",
                  "enable_head_mixer",
                  "length_scale"
                ]
              },
              {
                "name": "_current_epsilon",
                "line": 330,
                "args": [
                  "self"
                ]
              },
              {
                "name": "__call__",
                "line": 339,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "passed",
          "message": "No PyTorch remnants found"
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (125 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 75
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 14
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 8
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 23
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0067s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.006860791007056832,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0064885420724749565,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.013580361031927168,
              "std_time": 0.001516020035288874,
              "min_time": 0.011439166031777859,
              "max_time": 0.014745500055141747,
              "tokens_per_second": 1178.1719176967613,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.015342583026116094,
              "std_time": 0.000803918289806175,
              "min_time": 0.014491708017885685,
              "max_time": 0.01642104098573327,
              "tokens_per_second": 2085.698343331739,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "passed",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_ms_resgate_mlx.py": {
      "file_name": "delta_net_ms_resgate_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 84,
              "bases": [
                "<ast.Attribute object at 0x110edabc0>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 180,
              "bases": [
                "<ast.Attribute object at 0x110ec2ce0>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 191,
              "bases": [
                "<ast.Attribute object at 0x110e96710>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 202,
              "bases": [
                "<ast.Attribute object at 0x110e94970>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 222,
              "bases": [
                "<ast.Attribute object at 0x110e958a0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 223,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 309,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 222,
            "methods": [
              {
                "name": "__init__",
                "line": 223,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 309,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (117 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 73
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 9
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 26
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0006s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00042387505527585745,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00081829191185534,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.0008217643480747938,
              "std_time": 0.00011914271625834545,
              "min_time": 0.000656458898447454,
              "max_time": 0.0009326670551672578,
              "tokens_per_second": 19470.301963676502,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0030090000169972577,
              "std_time": 0.000375102104446171,
              "min_time": 0.0024804159766063094,
              "max_time": 0.0033120420994237065,
              "tokens_per_second": 10634.762319454372,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_tapr_mlx.py": {
      "file_name": "delta_net_tapr_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 84,
              "bases": [
                "<ast.Attribute object at 0x110ecebf0>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 180,
              "bases": [
                "<ast.Attribute object at 0x110ea08e0>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 191,
              "bases": [
                "<ast.Attribute object at 0x110e973d0>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 202,
              "bases": [
                "<ast.Attribute object at 0x110e96320>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 222,
              "bases": [
                "<ast.Attribute object at 0x110e97c40>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 223,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 309,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 222,
            "methods": [
              {
                "name": "__init__",
                "line": 223,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 309,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (117 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 73
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 9
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 26
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0005s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.0002845419803634286,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.0006720420205965638,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.0008323193372537693,
              "std_time": 0.00012940091853609433,
              "min_time": 0.0006532080005854368,
              "max_time": 0.0009543749038130045,
              "tokens_per_second": 19223.390931648744,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0028240279449770847,
              "std_time": 0.0002991820470171749,
              "min_time": 0.002403041929937899,
              "max_time": 0.003071166924200952,
              "tokens_per_second": 11331.332629663359,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_cpaghr_mlx.py": {
      "file_name": "delta_net_cpaghr_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "_DepthwiseMultiScaleFIR",
              "line": 100,
              "bases": [
                "<ast.Attribute object at 0x111500bb0>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 164,
              "bases": [
                "<ast.Attribute object at 0x110ef0730>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 165,
              "args": [
                "self"
              ]
            },
            {
              "name": "_current_floor",
              "line": 299,
              "args": [
                "self"
              ]
            },
            {
              "name": "_current_entropy_coeff",
              "line": 306,
              "args": [
                "self"
              ]
            },
            {
              "name": "_untie_factor",
              "line": 313,
              "args": [
                "self"
              ]
            },
            {
              "name": "__call__",
              "line": 322,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 164,
            "methods": [
              {
                "name": "__init__",
                "line": 165,
                "args": [
                  "self"
                ]
              },
              {
                "name": "_current_floor",
                "line": 299,
                "args": [
                  "self"
                ]
              },
              {
                "name": "_current_entropy_coeff",
                "line": 306,
                "args": [
                  "self"
                ]
              },
              {
                "name": "_untie_factor",
                "line": 313,
                "args": [
                  "self"
                ]
              },
              {
                "name": "__call__",
                "line": 322,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "passed",
          "message": "No PyTorch remnants found"
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (108 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 66
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 16
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 5
            },
            {
              "pattern": "MLX module call method",
              "count": 2
            },
            {
              "pattern": "MLX array usage",
              "count": 19
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0071s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.011767666903324425,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.002373000024817884,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.000950860984933873,
              "std_time": 1.960628334905623e-05,
              "min_time": 0.0009351249318569899,
              "max_time": 0.0009785000002011657,
              "tokens_per_second": 16826.85508556512,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0009355556685477495,
              "std_time": 1.256484671339134e-06,
              "min_time": 0.0009337919764220715,
              "max_time": 0.0009366250596940517,
              "tokens_per_second": 34204.271403403676,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "passed",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_taigr_xs_mlx.py": {
      "file_name": "delta_net_taigr_xs_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 84,
              "bases": [
                "<ast.Attribute object at 0x110ec17b0>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 173,
              "bases": [
                "<ast.Attribute object at 0x110e97dc0>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 184,
              "bases": [
                "<ast.Attribute object at 0x110e97af0>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 195,
              "bases": [
                "<ast.Attribute object at 0x110e96530>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 215,
              "bases": [
                "<ast.Attribute object at 0x1017ddae0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 216,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 302,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 215,
            "methods": [
              {
                "name": "__init__",
                "line": 216,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 302,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (116 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 71
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 10
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 26
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0002s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00017345801461488008,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.0001824169885367155,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00019897233384350935,
              "std_time": 2.492676725974347e-05,
              "min_time": 0.00016387493815273046,
              "max_time": 0.00021937501151114702,
              "tokens_per_second": 80413.18956726875,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.00031916704028844833,
              "std_time": 1.278903509418023e-05,
              "min_time": 0.0003019169671460986,
              "max_time": 0.0003325000870972872,
              "tokens_per_second": 100260.97923858267,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_cagf_rc_pf_hybrid_mlx.py": {
      "file_name": "delta_net_cagf_rc_pf_hybrid_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn",
            "typing"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "_DepthwiseFIRConv1d",
              "line": 62,
              "bases": [
                "<ast.Attribute object at 0x1114628c0>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 200,
              "bases": [
                "<ast.Attribute object at 0x110eebe20>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 209,
              "bases": [
                "<ast.Attribute object at 0x110eeb310>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 223,
              "bases": [
                "<ast.Attribute object at 0x110eea680>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 279,
              "bases": [
                "<ast.Attribute object at 0x110ed95a0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 282,
              "args": [
                "self"
              ]
            },
            {
              "name": "_per_head_stats",
              "line": 386,
              "args": [
                "x"
              ]
            },
            {
              "name": "__call__",
              "line": 397,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 279,
            "methods": [
              {
                "name": "__init__",
                "line": 282,
                "args": [
                  "self"
                ]
              },
              {
                "name": "_per_head_stats",
                "line": 386,
                "args": [
                  "x"
                ]
              },
              {
                "name": "__call__",
                "line": 397,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "passed",
          "message": "No PyTorch remnants found"
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (154 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 90
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 16
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 10
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 33
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.2403s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.16027112503070384,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.32038208295125514,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.6004530972956369,
              "std_time": 0.007967177145659332,
              "min_time": 0.590161541942507,
              "max_time": 0.6095708749489859,
              "tokens_per_second": 26.646544204804556,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 1.2501557636617993,
              "std_time": 0.004937230645263704,
              "min_time": 1.2436003329930827,
              "max_time": 1.2555153330322355,
              "tokens_per_second": 25.596810357670645,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "passed",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_rmsgm_mlx.py": {
      "file_name": "delta_net_rmsgm_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 84,
              "bases": [
                "<ast.Attribute object at 0x110ec04f0>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 173,
              "bases": [
                "<ast.Attribute object at 0x110ee8c70>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 184,
              "bases": [
                "<ast.Attribute object at 0x110e97d60>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 195,
              "bases": [
                "<ast.Attribute object at 0x110e94520>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 215,
              "bases": [
                "<ast.Attribute object at 0x110e96920>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 216,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 302,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 215,
            "methods": [
              {
                "name": "__init__",
                "line": 216,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 302,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (116 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 71
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 10
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 26
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0002s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00018987501971423626,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.000199749949388206,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00020465262544651827,
              "std_time": 2.578445882728477e-05,
              "min_time": 0.00016862491611391306,
              "max_time": 0.00022754096426069736,
              "tokens_per_second": 78181.25941502406,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.00036402768455445766,
              "std_time": 2.613232154531458e-05,
              "min_time": 0.0003290419699624181,
              "max_time": 0.00039183301851153374,
              "tokens_per_second": 87905.40213765769,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_ahm_gate_mlx.py": {
      "file_name": "delta_net_ahm_gate_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "_DepthwiseFIRConv1d",
              "line": 83,
              "bases": [
                "<ast.Attribute object at 0x1114a3190>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 180,
              "bases": [
                "<ast.Attribute object at 0x11145c970>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 183,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult",
                "gate_bias_init",
                "gate_logit_init",
                "mix_init",
                "mix_floor_init",
                "mix_decay_steps",
                "tau_start",
                "tau_end",
                "tau_warmup_steps",
                "group_size",
                "entropy_suppress_thresh"
              ]
            },
            {
              "name": "_per_head_stats",
              "line": 315,
              "args": [
                "self",
                "x"
              ]
            },
            {
              "name": "_get_blended_tau",
              "line": 323,
              "args": [
                "self"
              ]
            },
            {
              "name": "_decay_mix_coeff",
              "line": 334,
              "args": [
                "self"
              ]
            },
            {
              "name": "_fused_entropy",
              "line": 342,
              "args": [
                "self",
                "probs"
              ]
            },
            {
              "name": "__call__",
              "line": 348,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 180,
            "methods": [
              {
                "name": "__init__",
                "line": 183,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult",
                  "gate_bias_init",
                  "gate_logit_init",
                  "mix_init",
                  "mix_floor_init",
                  "mix_decay_steps",
                  "tau_start",
                  "tau_end",
                  "tau_warmup_steps",
                  "group_size",
                  "entropy_suppress_thresh"
                ]
              },
              {
                "name": "_per_head_stats",
                "line": 315,
                "args": [
                  "self",
                  "x"
                ]
              },
              {
                "name": "_get_blended_tau",
                "line": 323,
                "args": [
                  "self"
                ]
              },
              {
                "name": "_decay_mix_coeff",
                "line": 334,
                "args": [
                  "self"
                ]
              },
              {
                "name": "_fused_entropy",
                "line": 342,
                "args": [
                  "self",
                  "probs"
                ]
              },
              {
                "name": "__call__",
                "line": 348,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "passed",
          "message": "No PyTorch remnants found"
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (145 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 88
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 17
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 8
            },
            {
              "pattern": "MLX module call method",
              "count": 2
            },
            {
              "pattern": "MLX array usage",
              "count": 30
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0001s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.00016354199033230543,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.00012695800978690386,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00012956967111676931,
              "std_time": 2.4073149358008896e-05,
              "min_time": 9.8041957244277e-05,
              "max_time": 0.00015645904932171106,
              "tokens_per_second": 123485.68814055769,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.00012955566247304282,
              "std_time": 6.3097620896378964e-06,
              "min_time": 0.00012216693721711636,
              "max_time": 0.00013758300337940454,
              "tokens_per_second": 246998.08089560247,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "passed",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_udmag_mlx.py": {
      "file_name": "delta_net_udmag_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 89,
              "bases": [
                "<ast.Attribute object at 0x110ec0b20>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 181,
              "bases": [
                "<ast.Attribute object at 0x110ea0550>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 192,
              "bases": [
                "<ast.Attribute object at 0x110e95060>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 203,
              "bases": [
                "<ast.Attribute object at 0x110e96410>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 223,
              "bases": [
                "<ast.Attribute object at 0x110e94bb0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 224,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 310,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 223,
            "methods": [
              {
                "name": "__init__",
                "line": 224,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 310,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (117 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 72
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 10
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 26
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0002s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00018683390226215124,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00019516597967594862,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00020476434535036483,
              "std_time": 3.056512440194711e-05,
              "min_time": 0.0001615419751033187,
              "max_time": 0.00022683409042656422,
              "tokens_per_second": 78138.60353775449,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.000319055359189709,
              "std_time": 1.542697781652227e-05,
              "min_time": 0.0002984580351039767,
              "max_time": 0.00033558299764990807,
              "tokens_per_second": 100296.0742651965,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_cagf_dpaf_eash_mlx.py": {
      "file_name": "delta_net_cagf_dpaf_eash_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn",
            "typing"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "RMSNorm",
              "line": 90,
              "bases": [
                "<ast.Attribute object at 0x1114ea170>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 102,
              "bases": [
                "<ast.Attribute object at 0x1114eaa40>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 114,
              "bases": [
                "<ast.Attribute object at 0x1114eba00>"
              ]
            },
            {
              "name": "DepthwiseFIRConv1d",
              "line": 149,
              "bases": [
                "<ast.Attribute object at 0x110eeb4f0>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 212,
              "bases": [
                "<ast.Attribute object at 0x110ec11b0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 214,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_short",
                "fir_kernel_size_long",
                "fir_noise_std",
                "fusion_hidden_mult",
                "fusion_dropout",
                "epsilon_init",
                "epsilon_final",
                "epsilon_decay_steps",
                "entropy_reg_init",
                "entropy_reg_final",
                "entropy_decay_steps",
                "temp_init"
              ]
            },
            {
              "name": "_per_head_stats",
              "line": 327,
              "args": [
                "x"
              ]
            },
            {
              "name": "_dual_phase_epsilon",
              "line": 335,
              "args": [
                "self"
              ]
            },
            {
              "name": "_entropy_lambda",
              "line": 342,
              "args": [
                "self"
              ]
            },
            {
              "name": "__call__",
              "line": 349,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 212,
            "methods": [
              {
                "name": "__init__",
                "line": 214,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_short",
                  "fir_kernel_size_long",
                  "fir_noise_std",
                  "fusion_hidden_mult",
                  "fusion_dropout",
                  "epsilon_init",
                  "epsilon_final",
                  "epsilon_decay_steps",
                  "entropy_reg_init",
                  "entropy_reg_final",
                  "entropy_decay_steps",
                  "temp_init"
                ]
              },
              {
                "name": "_per_head_stats",
                "line": 327,
                "args": [
                  "x"
                ]
              },
              {
                "name": "_dual_phase_epsilon",
                "line": 335,
                "args": [
                  "self"
                ]
              },
              {
                "name": "_entropy_lambda",
                "line": 342,
                "args": [
                  "self"
                ]
              },
              {
                "name": "__call__",
                "line": 349,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 2 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "import mlx.core as mx\nimport mlx.nn as nn\n# Note: einops doesn't support MLX, so we'll use manual reshape"
            },
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 15,
              "match": "einops",
              "context": "ef rearrange(x, pattern, **kwargs):\n    \"\"\"Simple einops rearrange replacement for MLX\"\"\"\n    if pattern ="
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (93 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 52
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 26
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 6
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 4
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0008s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0011266670189797878,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0004988330183550715,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00043981933655838173,
              "std_time": 4.209338742129071e-05,
              "min_time": 0.00038104201667010784,
              "max_time": 0.00047737499698996544,
              "tokens_per_second": 36378.57335969165,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0005377219834675392,
              "std_time": 1.0768898731163425e-05,
              "min_time": 0.0005228749942034483,
              "max_time": 0.0005480829859152436,
              "tokens_per_second": 59510.30641084391,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_aif_mlx.py": {
      "file_name": "delta_net_aif_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "warning",
          "message": "All imports successful (with 1 unconverted imports)",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn",
            "fla.models.utils"
          ],
          "warnings": [
            "Line 306: from fla.models.utils import Cache"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "ShortConvolution",
              "line": 118,
              "bases": [
                "<ast.Attribute object at 0x11144f220>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 143,
              "bases": [
                "<ast.Attribute object at 0x11144dab0>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 154,
              "bases": [
                "<ast.Attribute object at 0x11144cf70>"
              ]
            },
            {
              "name": "_DepthwiseFIRConv1d",
              "line": 172,
              "bases": [
                "<ast.Attribute object at 0x11144c190>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 312,
              "bases": [
                "<ast.Attribute object at 0x110ea1f00>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 316,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_short_kernel",
                "fir_long_kernel",
                "base_min_id_frac",
                "id_floor_warmup_steps",
                "id_gate_alpha_init",
                "epsilon_floor",
                "tau_group_size",
                "tau_transition_steps",
                "router_hidden_mult",
                "router_dropout"
              ]
            },
            {
              "name": "_current_id_floor_scale",
              "line": 445,
              "args": [
                "self"
              ]
            },
            {
              "name": "_blend_tau",
              "line": 452,
              "args": [
                "self"
              ]
            },
            {
              "name": "_mean_std",
              "line": 461,
              "args": [
                "x"
              ]
            },
            {
              "name": "__call__",
              "line": 470,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 312,
            "methods": [
              {
                "name": "__init__",
                "line": 316,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_short_kernel",
                  "fir_long_kernel",
                  "base_min_id_frac",
                  "id_floor_warmup_steps",
                  "id_gate_alpha_init",
                  "epsilon_floor",
                  "tau_group_size",
                  "tau_transition_steps",
                  "router_hidden_mult",
                  "router_dropout"
                ]
              },
              {
                "name": "_current_id_floor_scale",
                "line": 445,
                "args": [
                  "self"
                ]
              },
              {
                "name": "_blend_tau",
                "line": 452,
                "args": [
                  "self"
                ]
              },
              {
                "name": "_mean_std",
                "line": 461,
                "args": [
                  "x"
                ]
              },
              {
                "name": "__call__",
                "line": 470,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 2 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 61,
              "match": "einops",
              "context": "attern: str, **kwargs) -> mx.array:\n    \"\"\"Simple einops rearrange replacement for common patterns\"\"\""
            },
            {
              "pattern": "from fla",
              "description": "FLA module usage",
              "line": 306,
              "match": "from fla",
              "context": "-------\nif TYPE_CHECKING:  # pragma: no cover\n    from fla.models.utils import Cache  # noqa: F401 \u2013 type hi"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (155 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 102
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 16
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 28
            }
          ]
        },
        "instantiation": {
          "status": "skipped",
          "reason": "imports_failed"
        },
        "forward_pass": {
          "status": "skipped",
          "reason": "imports_failed"
        },
        "shape_compatibility": {
          "status": "skipped",
          "reason": "imports_failed"
        },
        "parameter_analysis": {
          "status": "skipped",
          "reason": "imports_failed"
        },
        "performance": {
          "status": "skipped",
          "reason": "imports_failed"
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_dynfuse_mlx.py": {
      "file_name": "delta_net_dynfuse_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 84,
              "bases": [
                "<ast.Attribute object at 0x110ecce80>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 175,
              "bases": [
                "<ast.Attribute object at 0x110ec0d90>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 186,
              "bases": [
                "<ast.Attribute object at 0x110e97070>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 197,
              "bases": [
                "<ast.Attribute object at 0x110e968f0>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 217,
              "bases": [
                "<ast.Attribute object at 0x110e976a0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 218,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 304,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 217,
            "methods": [
              {
                "name": "__init__",
                "line": 218,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 304,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (116 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 72
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 9
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 26
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0003s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00028441601898521185,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00027495797257870436,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.000185833351376156,
              "std_time": 1.1852837681485652e-05,
              "min_time": 0.00017062504775822163,
              "max_time": 0.0001995420316234231,
              "tokens_per_second": 86098.64634908014,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0002955133483434717,
              "std_time": 1.4601445484563644e-05,
              "min_time": 0.00028029095847159624,
              "max_time": 0.00031520810443907976,
              "tokens_per_second": 108286.14064095262,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_erfg_mlx.py": {
      "file_name": "delta_net_erfg_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "_DepthwiseFIRConv1d",
              "line": 100,
              "bases": [
                "<ast.Attribute object at 0x1114a0760>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 227,
              "bases": [
                "<ast.Attribute object at 0x110e958a0>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 238,
              "bases": [
                "<ast.Attribute object at 0x1017def80>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 249,
              "bases": [
                "<ast.Attribute object at 0x11532ff40>"
              ]
            },
            {
              "name": "_EntropyRegularisedGate",
              "line": 273,
              "bases": [
                "<ast.Attribute object at 0x11532d6c0>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 348,
              "bases": [
                "<ast.Attribute object at 0x11148e2c0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 349,
              "args": [
                "self"
              ]
            },
            {
              "name": "__call__",
              "line": 469,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 348,
            "methods": [
              {
                "name": "__init__",
                "line": 349,
                "args": [
                  "self"
                ]
              },
              {
                "name": "__call__",
                "line": 469,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 20,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (181 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 110
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 22
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 6
            },
            {
              "pattern": "MLX module call method",
              "count": 6
            },
            {
              "pattern": "MLX array usage",
              "count": 37
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0144s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.01440854195971042,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.01431187498383224,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.001824666668350498,
              "std_time": 0.00048491792156374986,
              "min_time": 0.0011392920278012753,
              "max_time": 0.0021877080434933305,
              "tokens_per_second": 8768.724873164932,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.002303624991327524,
              "std_time": 1.0292273204414369e-05,
              "min_time": 0.002289084019139409,
              "max_time": 0.0023114579962566495,
              "tokens_per_second": 13891.149870517407,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_aft_dsi_mlx.py": {
      "file_name": "delta_net_aft_dsi_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "_DepthwiseFIRConv1d",
              "line": 111,
              "bases": [
                "<ast.Attribute object at 0x1114a7040>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 164,
              "bases": [
                "<ast.Attribute object at 0x1114a4250>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 195,
              "bases": [
                "<ast.Attribute object at 0x110f0ae00>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 206,
              "bases": [
                "<ast.Attribute object at 0x110eeb3a0>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 217,
              "bases": [
                "<ast.Attribute object at 0x110eea680>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 221,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult",
                "min_copy_frac_start",
                "min_copy_frac_end",
                "copy_frac_decay_steps",
                "identity_alpha_init",
                "fusion_dropout",
                "group_size",
                "tau_transition_steps",
                "epsilon_start",
                "epsilon_end",
                "epsilon_decay"
              ]
            },
            {
              "name": "_current_copy_frac",
              "line": 343,
              "args": [
                "self"
              ]
            },
            {
              "name": "_current_epsilon",
              "line": 350,
              "args": [
                "self"
              ]
            },
            {
              "name": "_mix_temperature",
              "line": 357,
              "args": [
                "self"
              ]
            },
            {
              "name": "_stats_mean_std",
              "line": 366,
              "args": [
                "path"
              ]
            },
            {
              "name": "__call__",
              "line": 371,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 217,
            "methods": [
              {
                "name": "__init__",
                "line": 221,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult",
                  "min_copy_frac_start",
                  "min_copy_frac_end",
                  "copy_frac_decay_steps",
                  "identity_alpha_init",
                  "fusion_dropout",
                  "group_size",
                  "tau_transition_steps",
                  "epsilon_start",
                  "epsilon_end",
                  "epsilon_decay"
                ]
              },
              {
                "name": "_current_copy_frac",
                "line": 343,
                "args": [
                  "self"
                ]
              },
              {
                "name": "_current_epsilon",
                "line": 350,
                "args": [
                  "self"
                ]
              },
              {
                "name": "_mix_temperature",
                "line": 357,
                "args": [
                  "self"
                ]
              },
              {
                "name": "_stats_mean_std",
                "line": 366,
                "args": [
                  "path"
                ]
              },
              {
                "name": "__call__",
                "line": 371,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 2 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 17,
              "match": "einops",
              "context": "utation, depthwise/causal FIR, and batch-agnostic einops patterns.\n5. **Batch-size and Sequence-robustness"
            },
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 19,
              "match": "einops",
              "context": "ensor ops are strictly batch/shape agnostic using einops.\n\n\"\"\"\nfrom __future__ import annotations\n\nimport"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (151 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 93
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 12
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 7
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 34
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0008s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 9.816698729991913e-05,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0015142919728532434,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.0005426662974059582,
              "std_time": 2.2205045073964894e-05,
              "min_time": 0.0005114579107612371,
              "max_time": 0.0005612910026684403,
              "tokens_per_second": 29484.04954662351,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0005535693295920888,
              "std_time": 3.3414766450340655e-06,
              "min_time": 0.0005510420305654407,
              "max_time": 0.0005582909798249602,
              "tokens_per_second": 57806.6707987236,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_headgated_mlx.py": {
      "file_name": "delta_net_headgated_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "warning",
          "message": "All imports successful (with 1 unconverted imports)",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn",
            "fla.models.utils"
          ],
          "warnings": [
            "Line 226: from fla.models.utils import Cache"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "_DepthwiseFIRConv1d",
              "line": 117,
              "bases": [
                "<ast.Attribute object at 0x1114904f0>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 233,
              "bases": [
                "<ast.Attribute object at 0x1114c7370>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 247,
              "bases": [
                "<ast.Attribute object at 0x1114c6710>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 261,
              "bases": [
                "<ast.Attribute object at 0x1114c5b40>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 283,
              "bases": [
                "<ast.Attribute object at 0x1114c45e0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 287,
              "args": [
                "self"
              ]
            },
            {
              "name": "_per_head_stats",
              "line": 401,
              "args": [
                "x"
              ]
            },
            {
              "name": "__call__",
              "line": 411,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 283,
            "methods": [
              {
                "name": "__init__",
                "line": 287,
                "args": [
                  "self"
                ]
              },
              {
                "name": "_per_head_stats",
                "line": 401,
                "args": [
                  "x"
                ]
              },
              {
                "name": "__call__",
                "line": 411,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 2 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 19,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            },
            {
              "pattern": "from fla",
              "description": "FLA module usage",
              "line": 226,
              "match": "from fla",
              "context": "-------\nif TYPE_CHECKING:  # pragma: no cover\n    from fla.models.utils import Cache  # type: ignore\n\n# ----"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (133 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 80
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 15
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 8
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 25
            }
          ]
        },
        "instantiation": {
          "status": "skipped",
          "reason": "imports_failed"
        },
        "forward_pass": {
          "status": "skipped",
          "reason": "imports_failed"
        },
        "shape_compatibility": {
          "status": "skipped",
          "reason": "imports_failed"
        },
        "parameter_analysis": {
          "status": "skipped",
          "reason": "imports_failed"
        },
        "performance": {
          "status": "skipped",
          "reason": "imports_failed"
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_rggf_mlx.py": {
      "file_name": "delta_net_rggf_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 90,
              "bases": [
                "<ast.Attribute object at 0x1114a28f0>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 186,
              "bases": [
                "<ast.Attribute object at 0x110f08790>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 197,
              "bases": [
                "<ast.Attribute object at 0x110f0a290>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 208,
              "bases": [
                "<ast.Attribute object at 0x110eea080>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 228,
              "bases": [
                "<ast.Attribute object at 0x110ee8c40>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 229,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 315,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 228,
            "methods": [
              {
                "name": "__init__",
                "line": 229,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 315,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (118 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 73
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 10
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 26
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0002s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.000152791035361588,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00017741706687957048,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00020512534926335016,
              "std_time": 3.267888045308157e-05,
              "min_time": 0.00015895895194262266,
              "max_time": 0.00023004203103482723,
              "tokens_per_second": 78001.08595773017,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.00031715262836466235,
              "std_time": 2.2183873130688482e-05,
              "min_time": 0.00028974993620067835,
              "max_time": 0.0003440829459577799,
              "tokens_per_second": 100897.79222389535,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_hdsr_mlx.py": {
      "file_name": "delta_net_hdsr_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn",
            "typing"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "RMSNorm",
              "line": 107,
              "bases": [
                "<ast.Attribute object at 0x111519ba0>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 118,
              "bases": [
                "<ast.Attribute object at 0x111519060>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 132,
              "bases": [
                "<ast.Attribute object at 0x111518280>"
              ]
            },
            {
              "name": "_DepthwiseFIRConv1d",
              "line": 167,
              "bases": [
                "<ast.Attribute object at 0x11147cf10>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 275,
              "bases": [
                "<ast.Attribute object at 0x110f0a110>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 278,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_short_kernel",
                "fir_long_kernel",
                "dirac_eps",
                "fusion_hidden_mult",
                "gate_temp_init",
                "gate_eps_init",
                "fusion_dropout",
                "floor_start",
                "floor_end",
                "floor_decay_steps",
                "entropy_start",
                "entropy_end",
                "entropy_decay_steps",
                "use_identity_path",
                "identity_scale_init"
              ]
            },
            {
              "name": "_current_floor_scale",
              "line": 390,
              "args": [
                "self"
              ]
            },
            {
              "name": "_current_entropy_scale",
              "line": 397,
              "args": [
                "self"
              ]
            },
            {
              "name": "_per_head_stats",
              "line": 405,
              "args": [
                "x"
              ]
            },
            {
              "name": "__call__",
              "line": 413,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 275,
            "methods": [
              {
                "name": "__init__",
                "line": 278,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_short_kernel",
                  "fir_long_kernel",
                  "dirac_eps",
                  "fusion_hidden_mult",
                  "gate_temp_init",
                  "gate_eps_init",
                  "fusion_dropout",
                  "floor_start",
                  "floor_end",
                  "floor_decay_steps",
                  "entropy_start",
                  "entropy_end",
                  "entropy_decay_steps",
                  "use_identity_path",
                  "identity_scale_init"
                ]
              },
              {
                "name": "_current_floor_scale",
                "line": 390,
                "args": [
                  "self"
                ]
              },
              {
                "name": "_current_entropy_scale",
                "line": 397,
                "args": [
                  "self"
                ]
              },
              {
                "name": "_per_head_stats",
                "line": 405,
                "args": [
                  "x"
                ]
              },
              {
                "name": "__call__",
                "line": 413,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 3 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 23,
              "match": "einops",
              "context": "chunkwise, batch-size-robust, and strictly causal einops/tensor logic.\n\nInterface and code follows all mis"
            },
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 35,
              "match": "einops",
              "context": "port mlx.core as mx\nimport mlx.nn as nn\n\n# Manual einops replacements for MLX\ndef rearrange(x, pattern, **"
            },
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 37,
              "match": "einops",
              "context": "ef rearrange(x, pattern, **kwargs):\n    \"\"\"Simple einops rearrange replacement for common patterns.\"\"\""
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (125 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 76
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 19
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 10
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 15
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0030s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0027686249231919646,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0032580000115558505,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.008028985660833618,
              "std_time": 4.1590394656094e-05,
              "min_time": 0.007971415994688869,
              "max_time": 0.00806820800062269,
              "tokens_per_second": 1992.7797452734253,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.015205333280997971,
              "std_time": 0.0007422037203492123,
              "min_time": 0.014593624975532293,
              "max_time": 0.01624987495597452,
              "tokens_per_second": 2104.524735409137,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_hrem_mlx.py": {
      "file_name": "delta_net_hrem_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn",
            "transformers.processing_utils"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseCausalConv1d",
              "line": 193,
              "bases": [
                "<ast.Attribute object at 0x1114e4550>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 211,
              "bases": [
                "<ast.Attribute object at 0x110f0b6a0>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 252,
              "bases": [
                "<ast.Attribute object at 0x110f09c30>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 264,
              "bases": [
                "<ast.Attribute object at 0x110f0a6b0>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 280,
              "bases": [
                "<ast.Attribute object at 0x110eeb550>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 283,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "local_kernel_size",
                "mid_kernel_size",
                "router_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 371,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 280,
            "methods": [
              {
                "name": "__init__",
                "line": 283,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "local_kernel_size",
                  "mid_kernel_size",
                  "router_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 371,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 3 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 30,
              "match": "einops",
              "context": "ions are batch-agnostic, handled exclusively with einops rearrange for runtime shape inference.\n\n6. **Crit"
            },
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 33,
              "match": "einops",
              "context": "uarantees**:\n   - No view/reshape, all shapes via einops. Batch size, sequence length, and head number are"
            },
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 49,
              "match": "einops",
              "context": "n as nn\n# Note: Using manual reshaping instead of einops for MLX compatibility\n\n# ------------------------"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (93 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 62
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 14
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 8
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0003s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.00022329192142933607,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0002890409668907523,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00031815271358937025,
              "std_time": 4.30180843956604e-05,
              "min_time": 0.0002574160462245345,
              "max_time": 0.0003515420248731971,
              "tokens_per_second": 50290.31442004514,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0005217777021850148,
              "std_time": 2.7982263316051144e-05,
              "min_time": 0.00048333301674574614,
              "max_time": 0.0005491250194609165,
              "tokens_per_second": 61328.79934500011,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_hhmr_mlx.py": {
      "file_name": "delta_net_hhmr_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "_DepthwiseMultiScaleFIR",
              "line": 130,
              "bases": [
                "<ast.Attribute object at 0x1114c4100>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 220,
              "bases": [
                "<ast.Attribute object at 0x11147e0b0>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 232,
              "bases": [
                "<ast.Attribute object at 0x110d7f640>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 244,
              "bases": [
                "<ast.Attribute object at 0x110e963e0>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 280,
              "bases": [
                "<ast.Attribute object at 0x110e952a0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 282,
              "args": [
                "self"
              ]
            },
            {
              "name": "_current_floor",
              "line": 409,
              "args": [
                "self"
              ]
            },
            {
              "name": "_current_entropy_coeff",
              "line": 416,
              "args": [
                "self"
              ]
            },
            {
              "name": "_untie_factor",
              "line": 423,
              "args": [
                "self"
              ]
            },
            {
              "name": "__call__",
              "line": 432,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 280,
            "methods": [
              {
                "name": "__init__",
                "line": 282,
                "args": [
                  "self"
                ]
              },
              {
                "name": "_current_floor",
                "line": 409,
                "args": [
                  "self"
                ]
              },
              {
                "name": "_current_entropy_coeff",
                "line": 416,
                "args": [
                  "self"
                ]
              },
              {
                "name": "_untie_factor",
                "line": 423,
                "args": [
                  "self"
                ]
              },
              {
                "name": "__call__",
                "line": 432,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 37,
              "match": "einops",
              "context": "mented with chunked, strictly causal patterns and einops \n     handling for universal batch/seq compatibil"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (169 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 105
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 26
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 6
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 27
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0009s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.00029270793311297894,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0014445839915424585,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.0012552226738383372,
              "std_time": 0.00011146852850805717,
              "min_time": 0.0011555840028449893,
              "max_time": 0.0014108340255916119,
              "tokens_per_second": 12746.742337814616,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.001455402661425372,
              "std_time": 4.725055891084658e-05,
              "min_time": 0.0013885829830542207,
              "max_time": 0.0014893329935148358,
              "tokens_per_second": 21987.04238225062,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_hwggm_mlx.py": {
      "file_name": "delta_net_hwggm_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 90,
              "bases": [
                "<ast.Attribute object at 0x110e95de0>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 186,
              "bases": [
                "<ast.Attribute object at 0x11144fc70>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 197,
              "bases": [
                "<ast.Attribute object at 0x1114e88b0>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 208,
              "bases": [
                "<ast.Attribute object at 0x1114e95a0>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 228,
              "bases": [
                "<ast.Attribute object at 0x1114eaaa0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 229,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 315,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 228,
            "methods": [
              {
                "name": "__init__",
                "line": 229,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 315,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (118 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 73
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 10
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 26
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0002s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00021454202942550182,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00023325008805841208,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00029156962409615517,
              "std_time": 0.00010367244231991712,
              "min_time": 0.00019383395556360483,
              "max_time": 0.0004350829403847456,
              "tokens_per_second": 54875.40085699547,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.00032490297841529053,
              "std_time": 9.57366454250621e-06,
              "min_time": 0.00031162495724856853,
              "max_time": 0.0003338339738547802,
              "tokens_per_second": 98490.94076046802,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_omsgf_mlx.py": {
      "file_name": "delta_net_omsgf_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 90,
              "bases": [
                "<ast.Attribute object at 0x1114619c0>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 186,
              "bases": [
                "<ast.Attribute object at 0x110e95930>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 197,
              "bases": [
                "<ast.Attribute object at 0x110ee9150>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 208,
              "bases": [
                "<ast.Attribute object at 0x110ee9f30>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 228,
              "bases": [
                "<ast.Attribute object at 0x110d7c9d0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 229,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 315,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 228,
            "methods": [
              {
                "name": "__init__",
                "line": 229,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 315,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (118 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 73
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 10
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 26
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0002s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00018183293286710978,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.00021566590294241905,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00021188927348703146,
              "std_time": 2.9722001572943552e-05,
              "min_time": 0.00016991689335554838,
              "max_time": 0.00023483391851186752,
              "tokens_per_second": 75511.13719297957,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.00033067997234563035,
              "std_time": 2.0390340078854427e-05,
              "min_time": 0.000302540953271091,
              "max_time": 0.00035020802170038223,
              "tokens_per_second": 96770.29961328667,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_htgmsm_mlx.py": {
      "file_name": "delta_net_htgmsm_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "HierarchicalGate",
              "line": 202,
              "bases": [
                "<ast.Attribute object at 0x110e94880>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 283,
              "bases": [
                "<ast.Attribute object at 0x110ee9660>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 286,
              "args": [
                "self"
              ]
            },
            {
              "name": "simple_conv1d",
              "line": 371,
              "args": [
                "self",
                "x",
                "weight"
              ]
            },
            {
              "name": "rms_norm",
              "line": 387,
              "args": [
                "self",
                "x",
                "weight",
                "eps"
              ]
            },
            {
              "name": "fused_rms_norm_gated",
              "line": 392,
              "args": [
                "self",
                "x",
                "g",
                "weight_x",
                "weight_g",
                "eps"
              ]
            },
            {
              "name": "__call__",
              "line": 398,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 283,
            "methods": [
              {
                "name": "__init__",
                "line": 286,
                "args": [
                  "self"
                ]
              },
              {
                "name": "simple_conv1d",
                "line": 371,
                "args": [
                  "self",
                  "x",
                  "weight"
                ]
              },
              {
                "name": "rms_norm",
                "line": 387,
                "args": [
                  "self",
                  "x",
                  "weight",
                  "eps"
                ]
              },
              {
                "name": "fused_rms_norm_gated",
                "line": 392,
                "args": [
                  "self",
                  "x",
                  "g",
                  "weight_x",
                  "weight_g",
                  "eps"
                ]
              },
              {
                "name": "__call__",
                "line": 398,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 2 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 45,
              "match": "einops",
              "context": "softmax attention anywhere.\n\n6. **Universal einops usage & Batch Agnosticism** \u2013 all reshapes via"
            },
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 46,
              "match": "einops",
              "context": "sage & Batch Agnosticism** \u2013 all reshapes via\n   `einops.rearrange`, dimensions inferred from runtime tens"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (130 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 91
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 16
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 5
            },
            {
              "pattern": "MLX module call method",
              "count": 2
            },
            {
              "pattern": "MLX array usage",
              "count": 16
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0006s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0003778330283239484,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0008795830653980374,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.0009617919567972422,
              "std_time": 0.00016245196388790293,
              "min_time": 0.0007336669368669391,
              "max_time": 0.0010994169861078262,
              "tokens_per_second": 16635.614268682224,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.003272444320221742,
              "std_time": 0.00030947181374411405,
              "min_time": 0.002836999949067831,
              "max_time": 0.003528250032104552,
              "tokens_per_second": 9778.62321514814,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_ssg_sparsemax_temp_mlx.py": {
      "file_name": "delta_net_ssg_sparsemax_temp_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "typing",
            "math",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "MultiScaleGate",
              "line": 186,
              "bases": [
                "<ast.Attribute object at 0x111461750>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 266,
              "bases": [
                "<ast.Attribute object at 0x110e97b20>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 269,
              "args": [
                "self"
              ]
            },
            {
              "name": "__call__",
              "line": 359,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 266,
            "methods": [
              {
                "name": "__init__",
                "line": 269,
                "args": [
                  "self"
                ]
              },
              {
                "name": "__call__",
                "line": 359,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 2 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 30,
              "match": "einops",
              "context": "mplementation is\n   batch-size agnostic and uses `einops.rearrange` exclusively for shape\n   transforms.\n\""
            },
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 41,
              "match": "einops",
              "context": "attern: str, **kwargs) -> mx.array:\n    \"\"\"Simple einops replacement for common patterns\"\"\"\n    if \"b l (h"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (101 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 58
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 17
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 6
            },
            {
              "pattern": "MLX module call method",
              "count": 2
            },
            {
              "pattern": "MLX array usage",
              "count": 18
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0003s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0002127080224454403,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0002894169883802533,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.0003100412820155422,
              "std_time": 5.495439288507049e-05,
              "min_time": 0.00023233296815305948,
              "max_time": 0.00034991593565791845,
              "tokens_per_second": 51606.030964605314,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0005811109828452269,
              "std_time": 4.511452388404044e-05,
              "min_time": 0.0005173329263925552,
              "max_time": 0.0006145000224933028,
              "tokens_per_second": 55066.93376078022,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_dlgm_mlx.py": {
      "file_name": "delta_net_dlgm_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 84,
              "bases": [
                "<ast.Attribute object at 0x11148ec20>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 175,
              "bases": [
                "<ast.Attribute object at 0x110e94730>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 186,
              "bases": [
                "<ast.Attribute object at 0x110e966e0>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 197,
              "bases": [
                "<ast.Attribute object at 0x110ee9ea0>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 217,
              "bases": [
                "<ast.Attribute object at 0x110eebf10>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 218,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_size_long",
                "fir_kernel_size_short",
                "fusion_hidden_mult"
              ]
            },
            {
              "name": "__call__",
              "line": 304,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 217,
            "methods": [
              {
                "name": "__init__",
                "line": 218,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_size_long",
                  "fir_kernel_size_short",
                  "fusion_hidden_mult"
                ]
              },
              {
                "name": "__call__",
                "line": 304,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 12,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (116 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 72
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 9
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 4
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 26
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0003s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.0002672499977052212,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 0,
              "forward_time": 0.0002578330459073186,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00017988899101813635,
              "std_time": 1.7270938888402363e-05,
              "min_time": 0.00015558290760964155,
              "max_time": 0.00019412499386817217,
              "tokens_per_second": 88943.7419679945,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.00028704165015369654,
              "std_time": 9.120942427675538e-06,
              "min_time": 0.00027424993459135294,
              "max_time": 0.0002948750043287873,
              "tokens_per_second": 111482.0792831479,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_bias_init_mix_gate_mlx.py": {
      "file_name": "delta_net_bias_init_mix_gate_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "typing",
            "mlx.core",
            "mlx.nn",
            "transformers.processing_utils"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DeltaNet",
              "line": 114,
              "bases": [
                "<ast.Attribute object at 0x111465480>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 117,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "use_mix_gate",
                "mix_bias_init"
              ]
            },
            {
              "name": "__call__",
              "line": 211,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 114,
            "methods": [
              {
                "name": "__init__",
                "line": 117,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "use_mix_gate",
                  "mix_bias_init"
                ]
              },
              {
                "name": "__call__",
                "line": 211,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 37,
              "match": "einops",
              "context": "untouched, batch independence is preserved,\nand `einops.rearrange` continues to be used for all reshaping"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (60 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 41
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 4
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 2
            },
            {
              "pattern": "MLX module call method",
              "count": 1
            },
            {
              "pattern": "MLX array usage",
              "count": 12
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0000s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 3.6499928683042526e-05,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 3.0374969355762005e-05,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 3.8722335981825985e-05,
              "std_time": 5.736484058011057e-06,
              "min_time": 3.066693898290396e-05,
              "max_time": 4.358298610895872e-05,
              "tokens_per_second": 413198.2122026282,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 4.318034431586663e-05,
              "std_time": 2.111959264484117e-06,
              "min_time": 4.0416023693978786e-05,
              "max_time": 4.554202314466238e-05,
              "tokens_per_second": 741077.92577841,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_gtmlp_mlx.py": {
      "file_name": "delta_net_gtmlp_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "DepthwiseFIRConv1d",
              "line": 157,
              "bases": [
                "<ast.Attribute object at 0x1114cfe80>"
              ]
            },
            {
              "name": "RMSNorm",
              "line": 259,
              "bases": [
                "<ast.Attribute object at 0x110e95fc0>"
              ]
            },
            {
              "name": "FusedRMSNormGated",
              "line": 270,
              "bases": [
                "<ast.Attribute object at 0x110e975b0>"
              ]
            },
            {
              "name": "ShortConvolution",
              "line": 281,
              "bases": [
                "<ast.Attribute object at 0x110e94880>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 305,
              "bases": [
                "<ast.Attribute object at 0x110eebe20>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 309,
              "args": [
                "self",
                "mode",
                "d_model",
                "hidden_size",
                "expand_k",
                "expand_v",
                "num_heads",
                "use_beta",
                "use_gate",
                "use_short_conv",
                "conv_size",
                "conv_bias",
                "allow_neg_eigval",
                "layer_idx",
                "qk_activation",
                "qk_norm",
                "norm_eps",
                "fir_kernel_short",
                "fir_kernel_long",
                "gate_hidden_mult",
                "group_size",
                "min_floor"
              ]
            },
            {
              "name": "__call__",
              "line": 419,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values",
                "use_cache",
                "output_attentions"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 305,
            "methods": [
              {
                "name": "__init__",
                "line": 309,
                "args": [
                  "self",
                  "mode",
                  "d_model",
                  "hidden_size",
                  "expand_k",
                  "expand_v",
                  "num_heads",
                  "use_beta",
                  "use_gate",
                  "use_short_conv",
                  "conv_size",
                  "conv_bias",
                  "allow_neg_eigval",
                  "layer_idx",
                  "qk_activation",
                  "qk_norm",
                  "norm_eps",
                  "fir_kernel_short",
                  "fir_kernel_long",
                  "gate_hidden_mult",
                  "group_size",
                  "min_floor"
                ]
              },
              {
                "name": "__call__",
                "line": 419,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values",
                  "use_cache",
                  "output_attentions"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "warning",
          "message": "Found 1 potential PyTorch remnants",
          "remnants": [
            {
              "pattern": "einops",
              "description": "Einops usage",
              "line": 67,
              "match": "einops",
              "context": "kwargs) -> mx.array:\n    \"\"\"MLX implementation of einops rearrange\"\"\"\n    if pattern == \"b l h d -> b (h d"
            }
          ]
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (161 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 94
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 21
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 11
            },
            {
              "pattern": "MLX module call method",
              "count": 5
            },
            {
              "pattern": "MLX array usage",
              "count": 30
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0011s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0011452499311417341,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.0010906250681728125,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.00029795834173758823,
              "std_time": 4.7626393219345615e-05,
              "min_time": 0.00023200002033263445,
              "max_time": 0.0003427499905228615,
              "tokens_per_second": 53698.78187230345,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0004361106548458338,
              "std_time": 1.2779791472622185e-05,
              "min_time": 0.000419583055190742,
              "max_time": 0.00045070797204971313,
              "tokens_per_second": 73375.87294516362,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "warning",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    },
    "delta_net_entropy_floor_mlx.py": {
      "file_name": "delta_net_entropy_floor_mlx.py",
      "tests": {
        "syntax": {
          "status": "passed",
          "message": "Valid Python syntax"
        },
        "imports": {
          "status": "passed",
          "message": "All imports successful",
          "imports_found": [
            "__future__",
            "math",
            "typing",
            "mlx.core",
            "mlx.nn"
          ]
        },
        "structure": {
          "status": "passed",
          "message": "Valid class structure",
          "classes_found": [
            {
              "name": "_DepthwiseFIRConv1d",
              "line": 104,
              "bases": [
                "<ast.Attribute object at 0x1114c7550>"
              ]
            },
            {
              "name": "ContentAdaptiveEntropicGate",
              "line": 151,
              "bases": [
                "<ast.Attribute object at 0x1114e7ee0>"
              ]
            },
            {
              "name": "DeltaNet",
              "line": 238,
              "bases": [
                "<ast.Attribute object at 0x11149e6b0>"
              ]
            }
          ],
          "methods_found": [
            {
              "name": "__init__",
              "line": 241,
              "args": [
                "self"
              ]
            },
            {
              "name": "_compute_stats",
              "line": 342,
              "args": [
                "self",
                "t"
              ]
            },
            {
              "name": "__call__",
              "line": 360,
              "args": [
                "self",
                "hidden_states",
                "attention_mask",
                "past_key_values"
              ]
            }
          ],
          "deltanet_analysis": {
            "line": 238,
            "methods": [
              {
                "name": "__init__",
                "line": 241,
                "args": [
                  "self"
                ]
              },
              {
                "name": "_compute_stats",
                "line": 342,
                "args": [
                  "self",
                  "t"
                ]
              },
              {
                "name": "__call__",
                "line": 360,
                "args": [
                  "self",
                  "hidden_states",
                  "attention_mask",
                  "past_key_values"
                ]
              }
            ],
            "missing_methods": []
          }
        },
        "pytorch_remnants": {
          "status": "passed",
          "message": "No PyTorch remnants found"
        },
        "mlx_compatibility": {
          "status": "passed",
          "message": "MLX usage detected (139 instances)",
          "mlx_usage": [
            {
              "pattern": "MLX core usage",
              "count": 89
            },
            {
              "pattern": "MLX neural network usage",
              "count": 0
            },
            {
              "pattern": "MLX axis parameter",
              "count": 17
            },
            {
              "pattern": "MLX keepdims parameter",
              "count": 8
            },
            {
              "pattern": "MLX module call method",
              "count": 3
            },
            {
              "pattern": "MLX array usage",
              "count": 22
            }
          ]
        },
        "instantiation": {
          "status": "passed",
          "message": "Successfully instantiated with all 2 configurations",
          "instantiation_results": [
            {
              "config": {
                "hidden_size": 32,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            },
            {
              "config": {
                "hidden_size": 64,
                "num_heads": 2
              },
              "success": true,
              "model_type": "<class 'test_module.DeltaNet'>"
            }
          ]
        },
        "forward_pass": {
          "status": "passed",
          "message": "All 2 forward passes successful (avg: 0.0004s)",
          "forward_results": [
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 8,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.00030508299823850393,
              "output_type": "<class 'mlx.core.array'>"
            },
            {
              "test_case": {
                "batch_size": 1,
                "seq_len": 16,
                "hidden_size": 32
              },
              "success": true,
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "additional_outputs": 2,
              "forward_time": 0.00045183300971984863,
              "output_type": "<class 'mlx.core.array'>"
            }
          ]
        },
        "shape_compatibility": {
          "status": "passed",
          "message": "All 4 shape tests passed with correct output shapes",
          "shape_results": [
            {
              "input_shape": [
                1,
                1,
                32
              ],
              "output_shape": [
                1,
                1,
                32
              ],
              "expected_shape": [
                1,
                1,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                8,
                32
              ],
              "output_shape": [
                1,
                8,
                32
              ],
              "expected_shape": [
                1,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                1,
                16,
                32
              ],
              "output_shape": [
                1,
                16,
                32
              ],
              "expected_shape": [
                1,
                16,
                32
              ],
              "shape_match": true,
              "success": true
            },
            {
              "input_shape": [
                2,
                8,
                32
              ],
              "output_shape": [
                2,
                8,
                32
              ],
              "expected_shape": [
                2,
                8,
                32
              ],
              "shape_match": true,
              "success": true
            }
          ]
        },
        "parameter_analysis": {
          "status": "passed",
          "message": "Model has 0 parameters",
          "total_parameters": 0,
          "parameter_breakdown": {},
          "parameter_categories": {
            "linear": 0,
            "conv": 0,
            "norm": 0,
            "gate": 0,
            "other": 0
          },
          "largest_components": []
        },
        "performance": {
          "status": "passed",
          "message": "Performance tested across 2 configurations",
          "performance_results": [
            {
              "config": "small",
              "batch_size": 1,
              "seq_len": 16,
              "avg_time": 0.000460681039839983,
              "std_time": 5.9334083916779854e-05,
              "min_time": 0.00037679204251617193,
              "max_time": 0.000504292082041502,
              "tokens_per_second": 34731.18842824003,
              "iterations": 10
            },
            {
              "config": "medium",
              "batch_size": 1,
              "seq_len": 32,
              "avg_time": 0.0008188196613142887,
              "std_time": 3.689409878511633e-05,
              "min_time": 0.0007666669553145766,
              "max_time": 0.000846249982714653,
              "tokens_per_second": 39080.6443858917,
              "iterations": 10
            }
          ]
        }
      },
      "overall_status": "passed",
      "errors": [],
      "warnings": [],
      "debug_info": {}
    }
  },
  "error_analysis": {
    "most_common_error_types": [],
    "most_common_error_messages": [],
    "files_with_most_errors": [],
    "total_errors": 0
  },
  "summary": {
    "pass_rate": 0.16981132075471697,
    "test_breakdown": {
      "syntax": {
        "passed": 106,
        "failed": 0,
        "warning": 0,
        "skipped": 0,
        "total": 106
      },
      "imports": {
        "passed": 102,
        "failed": 0,
        "warning": 4,
        "skipped": 0,
        "total": 106
      },
      "structure": {
        "passed": 106,
        "failed": 0,
        "warning": 0,
        "skipped": 0,
        "total": 106
      },
      "pytorch_remnants": {
        "passed": 18,
        "failed": 0,
        "warning": 88,
        "skipped": 0,
        "total": 106
      },
      "mlx_compatibility": {
        "passed": 106,
        "failed": 0,
        "warning": 0,
        "skipped": 0,
        "total": 106
      },
      "instantiation": {
        "passed": 102,
        "failed": 0,
        "warning": 0,
        "skipped": 4,
        "total": 106
      },
      "forward_pass": {
        "passed": 102,
        "failed": 0,
        "warning": 0,
        "skipped": 4,
        "total": 106
      },
      "shape_compatibility": {
        "passed": 102,
        "failed": 0,
        "warning": 0,
        "skipped": 4,
        "total": 106
      },
      "parameter_analysis": {
        "passed": 102,
        "failed": 0,
        "warning": 0,
        "skipped": 4,
        "total": 106
      },
      "performance": {
        "passed": 102,
        "failed": 0,
        "warning": 0,
        "skipped": 4,
        "total": 106
      }
    },
    "conversion_quality": {},
    "recommendations": [
      "Remove remaining PyTorch code patterns for complete conversion",
      "Consider reviewing conversion guidelines - low overall pass rate"
    ]
  }
}