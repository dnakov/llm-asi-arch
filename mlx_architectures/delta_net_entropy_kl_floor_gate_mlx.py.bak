# -*- coding: utf-8 -*-
"""
DeltaNet – Entropic Floor+KL Regularized Output-Stat Gating & Monotonic Long-Horizon Memory
=========================================================================================
Identifier: delta_net_entropy_kl_floor_gate

MLX Implementation
"""
from __future__ import annotations
import math
from typing import Optional, Tuple, Dict, TYPE_CHECKING
import mlx.core as mx
import mlx.nn as nn

if TYPE_CHECKING:
    from typing import Any as Cache

def _rearrange(tensor: mx.array, pattern: str, **kwargs) -> mx.array:
    """MLX implementation of einops rearrange"""
    if pattern == "b l h d -> b (h d) l":
        b, l, h, d = tensor.shape
        return tensor.transpose(0, 2, 3, 1).reshape(b, h * d, l)
    elif pattern == "h d k -> (h d) 1 k":
        h, d, k = tensor.shape
        return tensor.reshape(h * d, 1, k)
    elif pattern == "b (h d) l -> b l h d":
        b, hd, l = tensor.shape
        h = kwargs.get('h', hd // kwargs.get('d', 1))
        d = hd // h
        return tensor.reshape(b, h, d, l).transpose(0, 3, 1, 2)
    elif pattern == "... (h d) -> ... h d":
        *dims, hd = tensor.shape
        d = kwargs.get('d')
        h = hd // d
        return tensor.reshape(*dims, h, d)
    elif pattern == "b s d -> (b s) d":
        b, s, d = tensor.shape
        return tensor.reshape(b * s, d)
    elif pattern == "b l h d -> b h l d":
        return tensor.transpose(0, 2, 1, 3)
    elif pattern == "b h l d -> b l h d":
        return tensor.transpose(0, 2, 1, 3)
    elif pattern == "b l h d -> b l (h d)":
        b, l, h, d = tensor.shape
        return tensor.reshape(b, l, h * d)
    elif pattern == "b l (h d) -> b l h d":
        b, l, hd = tensor.shape
        d = kwargs.get('d')
        h = hd // d
        return tensor.reshape(b, l, h, d)
    elif pattern == "b h (n c) d -> b h n c d":
        b, h, nc, d = tensor.shape
        c = kwargs.get('c')
        n = nc // c
        return tensor.reshape(b, h, n, c, d)
    elif pattern == "b h n c d -> b h (n c) d":
        b, h, n, c, d = tensor.shape
        return tensor.reshape(b, h, n * c, d)
    else:
        raise NotImplementedError(f"Pattern {pattern} not implemented")

def _l2norm(x: mx.array) -> mx.array:
    """L2 normalization"""
    return x / mx.linalg.norm(x, axis=-1, keepdims=True)

def _elu_plus_one(x: mx.array) -> mx.array:
    """ELU + 1 activation"""
    return nn.elu(x) + 1.0

def _sum_norm(x: mx.array) -> mx.array:
    """Sum normalization"""
    return x / mx.sum(x, axis=-1, keepdims=True)

def _get_unpad_data(attention_mask: mx.array):
    """Get unpadding data from attention mask"""
    seqlens = mx.sum(attention_mask, axis=1)
    indices = mx.arange(attention_mask.shape[0] * attention_mask.shape[1])
    cu_seqlens = mx.concatenate([mx.array([0]), mx.cumsum(seqlens)])
    return indices, cu_seqlens, seqlens.max()

def _index_first_axis(tensor: mx.array, indices: mx.array) -> mx.array:
    """Index first axis"""
    return tensor[indices]

def _pad_input(tensor: mx.array, indices: mx.array, batch_size: int, seq_len: int) -> mx.array:
    """Pad input back to original shape"""
    return tensor.reshape(batch_size, seq_len, -1)

class _DepthwiseFIRConv1d(nn.Module):
    def __init__(self, num_heads: int, head_dim: int, kernel_size: int = 3, noise_std: float = 1e-2):
        super().__init__()
        self.kernel_size = kernel_size
        
        # Initialize with Dirac delta + noise
        filters_init = mx.zeros((num_heads, head_dim, kernel_size))
        # Set last element to 1.0 (Dirac delta) - use concatenation approach
        prefix = filters_init[:, :, :-1]
        dirac = mx.ones((num_heads, head_dim, 1))
        filters_init = mx.concatenate([prefix, dirac], axis=-1)
        # Add noise
        filters_init = filters_init + noise_std * mx.random.normal(filters_init.shape)
        self.filters = filters_init

    def __call__(self, x: mx.array) -> mx.array:
        b, l, h, d = x.shape
        x_f = _rearrange(x, "b l h d -> b (h d) l")
        weight = _rearrange(self.filters, "h d k -> (h d) 1 k")
        
        # Causal padding
        x_pad = mx.pad(x_f, [(0, 0), (0, 0), (self.kernel_size - 1, 0)])
        
        # Simulate grouped convolution manually
        outputs = []
        for g in range(h * d):
            # Extract signal and filter for this group
            sig = x_pad[:, g:g+1, :]  # (b, 1, l_pad)
            filt = weight[g:g+1, 0, :]  # (1, k)
            
            # Manual convolution
            conv_result = []
            for t in range(l):
                window = sig[:, 0, t:t+self.kernel_size]  # (b, k)
                if window.shape[-1] == self.kernel_size:
                    result = mx.sum(window * filt[0, :], axis=-1, keepdims=True)  # (b, 1)
                    conv_result.append(result)
            
            if conv_result:
                outputs.append(mx.stack(conv_result, axis=-1))  # (b, 1, l)
        
        y = mx.concatenate(outputs, axis=1)  # (b, h*d, l)
        return _rearrange(y, "b (h d) l -> b l h d", h=h)

def _monotonic_lambda(forget_param: mx.array, lambda_min: float = 0.5) -> mx.array:
    """Parameterize λ ∈ [λ_min, 1] monotonically via sigmoid/logit."""
    return lambda_min + (1.0 - lambda_min) * nn.sigmoid(forget_param)

@mx.compile
def _delta_chunk_monotonic(q, k, v, beta, lam, chunk_size: int = 32):
    """Causal chunkwise delta rule with monotonic per-head λ"""
    b, h, L, d_k = q.shape
    pad_len = (chunk_size - L % chunk_size) % chunk_size
    
    if pad_len:
        pad_cfg = [(0, 0), (0, 0), (0, pad_len), (0, 0)]
        q = mx.pad(q, pad_cfg)
        k = mx.pad(k, pad_cfg)
        v = mx.pad(v, pad_cfg)
        beta = mx.pad(beta, [(0, 0), (0, 0), (0, pad_len)])
    
    L_pad = L + pad_len
    
    # Normalize q and k
    q = _l2norm(q)
    k = _l2norm(k)
    
    # Apply beta weighting
    v = v * mx.expand_dims(beta, -1)
    k_beta = k * mx.expand_dims(beta, -1)
    
    # Reshape to chunks
    q = _rearrange(q, "b h (n c) d -> b h n c d", c=chunk_size)
    k = _rearrange(k, "b h (n c) d -> b h n c d", c=chunk_size)
    v = _rearrange(v, "b h (n c) d -> b h n c d", c=chunk_size)
    k_beta = _rearrange(k_beta, "b h (n c) d -> b h n c d", c=chunk_size)
    
    chunk_num = L_pad // chunk_size
    
    # Create causal mask
    mask_ = mx.triu(mx.ones((chunk_size, chunk_size)), k=0).astype(mx.bool_)
    
    # Compute within-chunk attention
    attn = -(k_beta @ mx.swapaxes(k, -2, -1))
    attn = mx.where(mask_, 0, attn)
    
    # Add cumulative products for intra-chunk interactions
    # Simplified for MLX compatibility - skip complex intra-chunk interactions
    pass
    
    attn = attn + mx.eye(chunk_size)
    
    # Apply to values and keys
    u = attn @ v
    w = attn @ k_beta
    
    # Initialize state and output
    S = mx.zeros((b, h, d_k, v.shape[-1]))
    o = mx.zeros_like(v)
    
    # Future mask for local attention
    mask_future = mx.triu(mx.ones((chunk_size, chunk_size)), k=1).astype(mx.bool_)
    
    # Process chunks sequentially
    for idx in range(chunk_num):
        q_i, k_i = q[:, :, idx], k[:, :, idx]
        
        # Apply monotonic lambda if provided
        if lam is not None:
            lam_bh = mx.expand_dims(mx.expand_dims(lam, -1), -1)
        else:
            lam_bh = 1.0
        
        # Local attention within chunk
        attn_local = q_i @ mx.swapaxes(k_i, -2, -1)
        attn_local = mx.where(mask_future, 0, attn_local)
        
        # Compute outputs - simplified for MLX
        u_i = u[:, :, idx] - w[:, :, idx] @ S
        o_inter = q_i @ S
        o_new_chunk = o_inter + attn_local @ u_i
        
        # Build new output tensor using list and stack
        if idx == 0:
            o_list = [o_new_chunk]
        else:
            o_list.append(o_new_chunk)
        
        # Update state with monotonic decay
        S = S * lam_bh + mx.swapaxes(k_i, -2, -1) @ u_i
    
    # Stack all output chunks
    o = mx.stack(o_list, axis=2)  # (b, h, n, c, d)
    o = _rearrange(o, "b h n c d -> b h (n c) d")
    if pad_len:
        o = o[:, :, :L]
    
    return o, S

class RMSNorm(nn.Module):
    def __init__(self, hidden_size: int, eps: float = 1e-5):
        super().__init__()
        self.weight = mx.ones(hidden_size)
        self.eps = eps

    def __call__(self, x: mx.array) -> mx.array:
        variance = mx.mean(x * x, axis=-1, keepdims=True)
        x = x / mx.sqrt(variance + self.eps)
        return self.weight * x

class FusedRMSNormGated(nn.Module):
    def __init__(self, hidden_size: int, eps: float = 1e-5):
        super().__init__()
        self.weight = mx.ones(hidden_size)
        self.eps = eps

    def __call__(self, x: mx.array, gate: mx.array) -> mx.array:
        variance = mx.mean(x * x, axis=-1, keepdims=True)
        x = x / mx.sqrt(variance + self.eps)
        return self.weight * x * gate

class _EntropyKLFusionGate(nn.Module):
    """Entropy+KL-regularized output-stat fusion gate with learnable per-path floor"""
    
    def __init__(
        self,
        hidden_size: int,
        num_heads: int,
        head_dim: int,
        fusion_hidden_mult: int = 2,
        max_floor: float = 0.075,
        temp_init: float = 1.25,
    ):
        super().__init__()
        self.num_heads = num_heads
        self.head_dim = head_dim
        self.max_floor = max_floor
        self.n_paths = 4
        
        # Learnable per-head temperature - must be parameters
        self.log_temp = mx.log(mx.full((num_heads,), temp_init))
        
        # Per-head,path learnable logit, bias favoring value - must be parameters
        self.floor_param = mx.full((num_heads, self.n_paths), -2.0)
        
        # Gate input dimension: hidden + 4 stats * 4 paths * num_heads
        gate_in = hidden_size + 4 * self.n_paths * num_heads
        
        self.mlp = nn.Sequential(
            nn.Linear(gate_in, hidden_size * fusion_hidden_mult, bias=True),
            nn.GELU(),
            nn.Linear(hidden_size * fusion_hidden_mult, num_heads * self.n_paths, bias=True),
        )
        
        # Initialize bias to favor value path (index 3)
        # MLX version - manual bias initialization
        bias_shape = (num_heads * self.n_paths,)
        bias_init = mx.zeros(bias_shape)
        # Favor value (path index 3) for every head using concatenation
        for h in range(num_heads):
            idx = h * self.n_paths + 3
            prefix = bias_init[:idx] if idx > 0 else mx.array([])
            value = mx.array([2.0])
            suffix = bias_init[idx+1:] if idx < len(bias_init)-1 else mx.array([])
            if prefix.size > 0 and suffix.size > 0:
                bias_init = mx.concatenate([prefix, value, suffix])
            elif prefix.size > 0:
                bias_init = mx.concatenate([prefix, value])
            elif suffix.size > 0:
                bias_init = mx.concatenate([value, suffix])
            else:
                bias_init = value
        
        self.last_entropy = None
        self.last_kl = None
        self.last_gate_loss = None
    
    def __call__(
        self,
        hidden: mx.array,
        short: mx.array,
        long: mx.array,
        delta: mx.array,
        value: mx.array,
        entropy_weight: float = 0.04,
        kl_weight: float = 0.04,
    ) -> mx.array:
        # Gather output statistics per branch [mean, var, max, l2-norm]
        def stats(t: mx.array) -> list[mx.array]:
            # [B,L,H,D]
            m = mx.mean(t, axis=-1, keepdims=True)  # [B,L,H,1]
            v = mx.var(t, axis=-1, keepdims=True)   # [B,L,H,1]
            mx_val = mx.max(t, axis=-1, keepdims=True)  # [B,L,H,1]
            l2 = mx.linalg.norm(t, axis=-1, keepdims=True)  # [B,L,H,1]
            return [m, v, mx_val, l2]
        
        # Compute statistics for each branch
        cat_stats = [mx.concatenate(stats(b), axis=-1) for b in [short, long, delta, value]]  # [B,L,H,4]
        
        # Flatten across heads/stats → never across batch/seq
        flat_stats = [_rearrange(cs, "b l h s -> b l (h s)") for cs in cat_stats]
        
        gate_in = mx.concatenate([hidden] + flat_stats, axis=-1)  # [B,L,hidden+16H]
        logits = self.mlp(gate_in)  # [B,L,H*P]
        logits = _rearrange(logits, "b l (h p) -> b l h p", h=self.num_heads, p=self.n_paths)
        
        # Apply temperature
        temp = mx.exp(self.log_temp)[None, None, :, None]
        logits = logits / temp
        
        # Softmax and apply floor
        raw_p = nn.softmax(logits, axis=-1)
        floor = nn.sigmoid(self.floor_param) * self.max_floor  # [H,P]
        floor = floor[None, None, :, :]
        clipped = mx.maximum(raw_p, floor)
        p = clipped / mx.sum(clipped, axis=-1, keepdims=True)
        
        # Calculate entropy & KL for regularization (no gradients)
        entropy = -mx.sum(p * mx.log(p + 1e-8), axis=-1).mean()
        self.last_entropy = float(entropy)
        
        uniform = mx.full_like(p, 1.0 / self.n_paths)
        kl = mx.sum(p * (mx.log(p + 1e-8) - mx.log(uniform)), axis=-1).mean()
        self.last_kl = float(kl)
        
        # Differentiable loss
        logp = mx.log(p + 1e-8)
        entropy_loss = -mx.sum(p * logp, axis=-1).mean()
        kl_loss = mx.sum(p * (logp - mx.log(uniform)), axis=-1).mean()
        self.last_gate_loss = entropy_weight * entropy_loss + kl_weight * kl_loss
        
        return p

class ShortConvolution(nn.Module):
    def __init__(self, hidden_size: int, kernel_size: int = 4, activation: str = None, bias: bool = False):
        super().__init__()
        self.hidden_size = hidden_size
        self.kernel_size = kernel_size
        self.activation = activation
        
        self.conv = nn.Conv1d(hidden_size, hidden_size, kernel_size, padding=kernel_size-1, bias=bias)

    def __call__(self, x, cache=None, output_final_state=False, cu_seqlens=None):
        # MLX Conv1d expects (batch, length, in_channels), x is already in this format
        y = self.conv(x)
        y = y[:, :x.shape[1], :]  # Trim to original sequence length
        
        if self.activation == "silu":
            y = nn.silu(y)
        
        final_state = None if not output_final_state else y[:, -self.kernel_size+1:]
        return y, final_state

class DeltaNet(nn.Module):
    """DeltaNet with Entropy+KL-regularized gating and monotonic memory decay."""

    def __init__(
        self,
        # Baseline & legacy parameters
        mode: str = "entropy_kl_floor_gate",
        d_model: Optional[int] = None,
        hidden_size: int = 1024,
        expand_k: float = 1.0,
        expand_v: float = 1.0,
        num_heads: int = 4,
        use_beta: bool = True,
        use_gate: bool = False,
        use_short_conv: bool = True,
        conv_size: int = 4,
        conv_bias: bool = False,
        allow_neg_eigval: bool = False,
        layer_idx: Optional[int] = None,
        qk_activation: str = "silu",
        qk_norm: str = "l2",
        norm_eps: float = 1e-5,
        # Newer params
        fir_short_kernel: int = 3,
        fir_long_kernel: int = 63,
        fir_noise_std: float = 7e-3,
        fusion_hidden_mult: int = 2,
        fusion_max_floor: float = 0.075,
        fusion_temp_init: float = 1.25,
        gate_entropy_weight: float = 0.04,
        gate_kl_weight: float = 0.04,
        use_forget_gate: bool = True,
        forget_min: float = 0.55,
        forget_init: float = 1.0,
        **kwargs,
    ):
        super().__init__()
        
        if d_model is not None:
            hidden_size = d_model
            
        self.hidden_size = hidden_size
        self.expand_k = expand_k
        self.expand_v = expand_v
        self.num_heads = num_heads
        self.use_beta = use_beta
        self.use_gate = use_gate
        self.use_short_conv = use_short_conv
        self.conv_size = conv_size
        self.conv_bias = conv_bias
        self.allow_neg_eigval = allow_neg_eigval
        self.layer_idx = layer_idx or 0
        self.qk_activation = qk_activation
        self.qk_norm = qk_norm
        
        # dims
        self.key_dim = int(hidden_size * expand_k)
        self.value_dim = int(hidden_size * expand_v)
        self.head_k_dim = self.key_dim // num_heads
        self.head_v_dim = self.value_dim // num_heads
        
        assert self.key_dim % num_heads == 0 and self.value_dim % num_heads == 0
        
        # Linear projections
        self.q_proj = nn.Linear(hidden_size, self.key_dim, bias=False)
        self.k_proj = nn.Linear(hidden_size, self.key_dim, bias=False)
        self.v_proj = nn.Linear(hidden_size, self.value_dim, bias=False)
        
        if use_beta:
            self.b_proj = nn.Linear(hidden_size, num_heads, bias=False)
        
        # Per-head monotonic forgetting parameterized by sigmoid
        if use_forget_gate:
            ratio = (forget_init - forget_min) / (1.0 - forget_min)
            ratio = float(max(min(ratio, 1 - 1e-4), 1e-4))
            init_logit = math.log(ratio / (1 - ratio))  # logit function
            self.forget_param = mx.full((num_heads,), init_logit)
        else:
            self.forget_param = None
        
        # Short-conv projections
        if use_short_conv:
            act = "silu" if qk_activation == "silu" else None
            self.q_conv1d = ShortConvolution(self.key_dim, kernel_size=conv_size, activation=act, bias=conv_bias)
            self.k_conv1d = ShortConvolution(self.key_dim, kernel_size=conv_size, activation=act, bias=conv_bias)
            self.v_conv1d = ShortConvolution(self.value_dim, kernel_size=conv_size, activation="silu", bias=conv_bias)
        else:
            raise UserWarning("ShortConvolution is mandatory for robust DeltaNet performance.")
        
        # Dual FIR branches
        self.fir_short = _DepthwiseFIRConv1d(num_heads, self.head_v_dim, kernel_size=fir_short_kernel, noise_std=fir_noise_std)
        self.fir_long = _DepthwiseFIRConv1d(num_heads, self.head_v_dim, kernel_size=fir_long_kernel, noise_std=fir_noise_std)
        
        # Gating
        self.fusion_gate = _EntropyKLFusionGate(
            hidden_size=hidden_size,
            num_heads=num_heads,
            head_dim=self.head_v_dim,
            fusion_hidden_mult=fusion_hidden_mult,
            max_floor=fusion_max_floor,
            temp_init=fusion_temp_init,
        )
        self.gate_entropy_weight = gate_entropy_weight
        self.gate_kl_weight = gate_kl_weight
        
        # Output norm/project
        if use_gate:
            self.g_proj = nn.Linear(hidden_size, self.value_dim, bias=False)
            self.o_norm = FusedRMSNormGated(self.head_v_dim, eps=norm_eps)
        else:
            self.o_norm = RMSNorm(self.head_v_dim, eps=norm_eps)
        
        self.o_proj = nn.Linear(self.value_dim, hidden_size, bias=False)
        self.last_gate_loss = None

    def __call__(
        self,
        hidden_states: mx.array,
        attention_mask: Optional[mx.array] = None,
        past_key_values: Optional["Cache"] = None,
        use_cache: Optional[bool] = False,
        output_attentions: Optional[bool] = False,
        **kwargs,
    ) -> Tuple[mx.array, None, Optional["Cache"]]:
        if attention_mask is not None:
            assert attention_mask.ndim == 2
        
        B, L, _ = hidden_states.shape
        last_state = None
        if past_key_values is not None and len(past_key_values) > self.layer_idx:
            last_state = past_key_values[self.layer_idx]
        
        cu_seqlens = kwargs.get("cu_seqlens", None)
        indices = None
        if attention_mask is not None:
            indices, cu_seqlens, _ = _get_unpad_data(attention_mask[:, -L:])
            hidden_states = _index_first_axis(
                _rearrange(hidden_states, "b s d -> (b s) d"), indices
            ).reshape(1, -1, hidden_states.shape[-1])
        
        conv_q = conv_k = conv_v = None
        if last_state is not None and last_state.get("conv_state") is not None:
            conv_q, conv_k, conv_v = last_state["conv_state"]
        
        q, conv_q = self.q_conv1d(self.q_proj(hidden_states), cache=conv_q, output_final_state=use_cache, cu_seqlens=cu_seqlens)
        k, conv_k = self.k_conv1d(self.k_proj(hidden_states), cache=conv_k, output_final_state=use_cache, cu_seqlens=cu_seqlens)
        v, conv_v = self.v_conv1d(self.v_proj(hidden_states), cache=conv_v, output_final_state=use_cache, cu_seqlens=cu_seqlens)
        
        q = _rearrange(q, "b l (h d) -> b l h d", d=self.head_k_dim)
        k = _rearrange(k, "b l (h d) -> b l h d", d=self.head_k_dim)
        v = _rearrange(v, "b l (h d) -> b l h d", d=self.head_v_dim)
        
        if self.qk_activation != "silu":
            if self.qk_activation == "relu":
                q, k = nn.relu(q), nn.relu(k)
            elif self.qk_activation == "elu":
                q, k = _elu_plus_one(q), _elu_plus_one(k)
            elif self.qk_activation != "identity":
                raise NotImplementedError
        
        if self.qk_norm == "sum":
            q, k = _sum_norm(q), _sum_norm(k)
        
        if self.use_beta:
            beta = nn.sigmoid(self.b_proj(hidden_states))
        else:
            beta = mx.ones_like(q[..., 0])
        
        if self.allow_neg_eigval:
            beta = beta * 2.0
        
        if self.forget_param is not None:
            lam = _monotonic_lambda(self.forget_param, lambda_min=0.55).reshape(1, self.num_heads)
            lam = mx.broadcast_to(lam, (q.shape[0], self.num_heads))
        else:
            lam = None
        
        q_d = _rearrange(q, "b l h d -> b h l d")
        k_d = _rearrange(k, "b l h d -> b h l d")
        v_d = _rearrange(v, "b l h d -> b h l d")
        beta_d = _rearrange(beta, "b l h -> b h l")
        
        delta_out, rec_state = _delta_chunk_monotonic(q_d, k_d, v_d, beta_d, lam)
        delta_out = _rearrange(delta_out, "b h l d -> b l h d")
        
        value = v
        short = self.fir_short(value)
        long = self.fir_long(value)
        
        fusion_w = self.fusion_gate(
            hidden_states,
            short,
            long,
            delta_out,
            value,
            entropy_weight=self.gate_entropy_weight,
            kl_weight=self.gate_kl_weight,
        )  # [B,L,H,4]
        
        o = (
            mx.expand_dims(fusion_w[..., 0], -1) * short
            + mx.expand_dims(fusion_w[..., 1], -1) * long
            + mx.expand_dims(fusion_w[..., 2], -1) * delta_out
            + mx.expand_dims(fusion_w[..., 3], -1) * value
        )
        
        if past_key_values is not None and use_cache:
            # Update cache (simplified for MLX)
            if hasattr(past_key_values, 'update'):
                past_key_values.update(
                    recurrent_state=rec_state,
                    conv_state=(conv_q, conv_k, conv_v),
                    layer_idx=self.layer_idx,
                    offset=L,
                )
            else:
                # Handle case where past_key_values is a simple dict
                past_key_values[self.layer_idx] = {
                    'recurrent_state': rec_state,
                    'conv_state': (conv_q, conv_k, conv_v),
                    'offset': L,
                }
        
        if self.use_gate:
            g_vec = _rearrange(self.g_proj(hidden_states), "b l (h d) -> b l h d", d=self.head_v_dim)
            o = self.o_norm(o, g_vec)
        else:
            o = self.o_norm(o)
        
        o = _rearrange(o, "b l h d -> b l (h d)")
        o = self.o_proj(o)
        
        if attention_mask is not None:
            o = _pad_input(o.squeeze(0), indices, B, L)
        
        # Expose entropy+KL-regularized loss for training aggregation
        self.last_gate_loss = self.fusion_gate.last_gate_loss
        
        return o, None, past_key_values