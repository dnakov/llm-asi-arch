# -*- coding: utf-8 -*-
"""
DeltaNet – Entropy-Regularized Content-Aware Fusion + Post-Fusion Normalization + Adaptive Residual Gating
=======================================================================================
Breakthrough evolution directly addressing bottlenecks of prior architectures:

Core Innovations:
1. **Explicit Gate Entropy Regularization:**
   - Gate entropy regularization is included as part of the architecture (exposed via an attribute; to be added to the loss externally) so that path selection remains diverse and avoids collapse, as strongly motivated by research and experimental evidence.
2. **Post-Fusion, Per-Token RMSNorm:**
   - *After* mixing fusion+residual, a per-token, per-head RMSNorm block is applied before o_proj, directly reining in variance explosion introduced by the residual conv path and restoring balance between local/global evidence.
3. **Context-Conditional Residual Scaling:**
   - The residual conv path scale (previously static per-head γ_h) is now dynamically generated by a lightweight per-head gating MLP that allows heads to adapt their residual impact based on local query evidence statistics, as in dynamic gating research.
4. **Preserved Computational Efficiency**
   - All processing is chunked and strictly O(N).
   - Full batch-size, sequence, and config agnosticism. Only einops.rearrange for all tensor reshaping/merging.
   - Forward input/output signatures and all config paradigms are 100% backward compatible. **kwargs is supported throughout.
5. **Exposed Regularization Signals**
   - Gate entropy regularization term is exposed via self.gate_entropy, ready to be added to the main loss. This provides direct optimizer pressure for optimal path mixture.

This yields a robust, adaptive, variance-controlled content fusion block with all major research-based upgrades recommended by the experimental evidence synthesis.
"""
from __future__ import annotations

import math
from typing import Optional, Tuple, TYPE_CHECKING, List

import torch
import torch.nn as nn
from torch.nn import functional as F
from einops import rearrange

from fla.layers.utils import get_unpad_data, index_first_axis, pad_input
from fla.modules import FusedRMSNormGated, RMSNorm, ShortConvolution
from fla.modules.l2norm import l2norm

if TYPE_CHECKING:  # pragma: no cover
    from fla.models.utils import Cache  # type: ignore

# ========== Utility helpers =================================================
def elu_p1(x: torch.Tensor) -> torch.Tensor:
    """Shifted ELU so output is strictly positive."""
    return (F.elu(x, 1.0, False) + 1.0).to(x)

def sum_norm(x: torch.Tensor) -> torch.Tensor:
    """Normalise last dim to sum-to-one."""
    return (x / x.sum(-1, keepdim=True)).to(x)

# ========== Depth-wise causal FIR convolution ===============================
class DepthwiseFIRConv1d(nn.Module):
    def __init__(self, num_heads: int, head_dim: int, kernel_size: int):
        super().__init__()
        self.kernel_size = int(kernel_size)
        self.filters = nn.Parameter(torch.randn(num_heads, head_dim, self.kernel_size) * 0.02)
    def forward(self, x: torch.Tensor) -> torch.Tensor:
        b, l, h, d = x.shape
        w = rearrange(self.filters, "h d k -> (h d) 1 k")
        x_f = rearrange(x, "b l h d -> b (h d) l")
        x_pad = F.pad(x_f, (self.kernel_size - 1, 0))
        y = F.conv1d(x_pad, weight=w, groups=h * d)
        return rearrange(y, "b (h d) l -> b l h d", h=h)

# ========== Core chunk-wise Δ-rule kernel ===================================
@torch.compile  # type: ignore[misc]
def delta_rule_chunkwise(
    q: torch.Tensor,
    k: torch.Tensor,
    v: torch.Tensor,
    beta: torch.Tensor,
    *,
    chunk_size: int = 32,
):
    b, h, L, d_k = q.shape
    pad_len = (chunk_size - L % chunk_size) % chunk_size
    if pad_len:
        pad_seq = (0, 0, 0, pad_len)
        q = F.pad(q, pad_seq)
        k = F.pad(k, pad_seq)
        v = F.pad(v, pad_seq)
        beta = F.pad(beta, (0, pad_len))
    L_pad = L + pad_len
    q = l2norm(q)
    k = l2norm(k)
    v = v * beta[..., None]
    k_beta = k * beta[..., None]
    q, k, v, k_beta = map(
        lambda t: rearrange(t, "b h (n c) d -> b h n c d", c=chunk_size),
        (q, k, v, k_beta),
    )
    tri_mask = torch.triu(torch.ones(chunk_size, chunk_size, dtype=torch.bool, device=q.device), 0)
    attn = -(k_beta @ k.transpose(-1, -2)).masked_fill(tri_mask, 0)
    for i in range(1, chunk_size):
        attn[..., i, : i] += (attn[..., i, :, None].clone() * attn[..., :, : i].clone()).sum(-2)
    attn = attn + torch.eye(chunk_size, dtype=attn.dtype, device=q.device)
    u = attn @ v
    w = attn @ k_beta
    S = k.new_zeros(b, h, d_k, v.shape[-1])
    o = torch.zeros_like(v)
    tri_strict = torch.triu(torch.ones(chunk_size, chunk_size, dtype=torch.bool, device=q.device), 1)
    for idx in range(L_pad // chunk_size):
        q_i, k_i = q[:, :, idx], k[:, :, idx]
        attn_local = (q_i @ k_i.transpose(-1, -2)).masked_fill_(tri_strict, 0)
        u_i = u[:, :, idx] - w[:, :, idx] @ S
        o[:, :, idx] = q_i @ S + attn_local @ u_i
        S = S + k_i.transpose(-1, -2) @ u_i
    o = rearrange(o, "b h n c d -> b h (n c) d")
    if pad_len:
        o = o[:, :, :L]
    return o, S

# ========== Adaptive Residual Gating MLP ====================================
class DynamicResGatingMLP(nn.Module):
    def __init__(self, hidden_size: int, num_heads: int):
        super().__init__()
        self.num_heads = num_heads
        self.mlp = nn.Sequential(
            nn.Linear(hidden_size, hidden_size//2, bias=True),
            nn.GELU(),
            nn.Linear(hidden_size//2, num_heads, bias=True)
        )
        with torch.no_grad():
            self.mlp[-1].bias.fill_(-2.0)  # weak start
    def forward(self, hidden_states: torch.Tensor):
        # hidden_states: (b, l, d)
        # output: (b, l, h)
        out = self.mlp(hidden_states)  # (b, l, h)
        return torch.sigmoid(out)  # (0,1) per token, per head

# ========== Per-token RMSNorm ===============================================
class PerTokenRMSNorm(nn.Module):
    def __init__(self, head_dim: int, eps: float = 1e-5):
        super().__init__()
        self.eps = eps
        self.scale = nn.Parameter(torch.ones(head_dim))
    def forward(self, x: torch.Tensor) -> torch.Tensor:
        # x: (b, l, h, d)
        orig_dtype = x.dtype
        x = x.to(torch.float32)
        mean_square = (x ** 2).mean(dim=-1, keepdim=True)
        x_norm = x / torch.sqrt(mean_square + self.eps)
        x_norm = x_norm * self.scale  # (b,l,h,d)
        return x_norm.to(orig_dtype)

# ========== DeltaNet (Entropy-Reg, RMSNorm, Adaptive Residual) ==============
class DeltaNet(nn.Module):
    def __init__(
        self,
        mode: str = "entropy_cagf_rc_norm",
        d_model: int | None = None,
        hidden_size: int = 1024,
        expand_k: float = 1.0,
        expand_v: float = 1.0,
        num_heads: int = 4,
        use_beta: bool = True,
        use_gate: bool = False,
        use_short_conv: bool = True,
        conv_size: int = 4,
        conv_bias: bool = False,
        allow_neg_eigval: bool = False,
        layer_idx: int | None = None,
        qk_activation: str = "silu",
        qk_norm: str = "l2",
        norm_eps: float = 1e-5,
        fir_kernel_size_long: int = 64,
        fir_kernel_size_short: int = 5,
        fusion_hidden_mult: int = 2,
        gate_bias_init: Tuple[float, float, float, float] = (-0.5, -0.5, 1.0, 3.0),
        gate_logit_init: float = math.log(math.expm1(0.7)),
        gate_entropy_weight: float = 0.02,  # NEW: default entropy reg lambda
        **kwargs,
    ):
        super().__init__()
        self.mode = mode
        self.qk_activation = qk_activation
        self.qk_norm = qk_norm
        if d_model is not None:
            hidden_size = d_model
        self.hidden_size = hidden_size
        self.expand_k = expand_k
        self.expand_v = expand_v
        self.num_heads = num_heads
        self.use_gate = use_gate
        self.use_short_conv = use_short_conv
        self.conv_size = conv_size
        self.conv_bias = conv_bias
        self.allow_neg_eigval = allow_neg_eigval
        self.layer_idx = layer_idx
        self.key_dim = int(hidden_size * expand_k)
        self.value_dim = int(hidden_size * expand_v)
        self.head_k_dim = self.key_dim // num_heads
        self.head_v_dim = self.value_dim // num_heads
        assert self.key_dim % num_heads == 0 and self.value_dim % num_heads == 0
        self.q_proj = nn.Linear(hidden_size, self.key_dim, bias=False)
        self.k_proj = nn.Linear(hidden_size, self.key_dim, bias=False)
        self.v_proj = nn.Linear(hidden_size, self.value_dim, bias=False)
        self.use_beta = use_beta
        if self.use_beta:
            self.b_proj = nn.Linear(hidden_size, num_heads, bias=False)
        if use_short_conv:
            act = "silu" if qk_activation == "silu" else None
            self.q_conv1d = ShortConvolution(self.key_dim, conv_size, activation=act)
            self.k_conv1d = ShortConvolution(self.key_dim, conv_size, activation=act)
            self.v_conv1d = ShortConvolution(self.value_dim, conv_size, activation="silu")
        else:
            raise UserWarning("ShortConvolution is mandatory for DeltaNet stability.")
        self.local_fir_long = DepthwiseFIRConv1d(
            num_heads=self.num_heads, head_dim=self.head_v_dim, kernel_size=fir_kernel_size_long
        )
        self.local_fir_short = DepthwiseFIRConv1d(
            num_heads=self.num_heads, head_dim=self.head_v_dim, kernel_size=fir_kernel_size_short
        )
        self.stat_dim = 16
        gate_in_dim = hidden_size + self.stat_dim
        hidden_gate_dim = hidden_size * fusion_hidden_mult // 2
        self.fusion_gate_mlp = nn.Sequential(
            nn.Linear(gate_in_dim, hidden_gate_dim, bias=True),
            nn.GELU(),
            nn.Linear(hidden_gate_dim, 4, bias=True),
        )
        with torch.no_grad():
            self.fusion_gate_mlp[-1].bias[:] = torch.tensor(gate_bias_init)
        self.logit_temperature = nn.Parameter(torch.full((1,), gate_logit_init))
        # ============ Adaptive residual gating ============
        self.residual_gating_mlp = DynamicResGatingMLP(hidden_size, self.num_heads)
        # ============ Post-mix per-token RMSNorm ===========
        self.fusion_norm = PerTokenRMSNorm(self.head_v_dim, eps=norm_eps)
        # ============ Output norm/proj ============
        if self.use_gate:
            self.g_proj = nn.Linear(hidden_size, self.value_dim, bias=False)
            self.o_norm = FusedRMSNormGated(self.head_v_dim, eps=norm_eps)
        else:
            self.o_norm = RMSNorm(self.head_v_dim, eps=norm_eps)
        self.o_proj = nn.Linear(self.value_dim, hidden_size, bias=False)
        # ============ Gate entropy reg =============
        self.gate_entropy_weight = gate_entropy_weight
        self.gate_entropy = None  # Will set during forward
    @staticmethod
    def _per_head_stats(x: torch.Tensor) -> torch.Tensor:
        mean = x.mean(dim=-1, keepdim=True)
        var = x.var(dim=-1, unbiased=False, keepdim=True)
        abs_mean = x.abs().mean(dim=-1, keepdim=True)
        l2 = x.norm(dim=-1, keepdim=True)
        return torch.cat([mean, var, abs_mean, l2], dim=-1)
    def forward(
        self,
        hidden_states: torch.Tensor,
        attention_mask: Optional[torch.Tensor] = None,
        past_key_values: Optional["Cache"] = None,  # type: ignore[name-defined]
        use_cache: Optional[bool] = False,
        output_attentions: Optional[bool] = False,  # kept for API compatibility
        **kwargs,
    ):
        if attention_mask is not None:
            assert attention_mask.ndim == 2, "attention_mask must be (batch, seq_len)"
        batch_size, seq_len_full, _ = hidden_states.shape
        last_state = None
        if past_key_values is not None and self.layer_idx is not None and len(past_key_values) > self.layer_idx:
            last_state = past_key_values[self.layer_idx]
        cu_seqlens = kwargs.get("cu_seqlens", None)
        indices = None
        if attention_mask is not None:
            indices, cu_seqlens, _ = get_unpad_data(attention_mask[:, -seq_len_full:])
            hidden_states = index_first_axis(rearrange(hidden_states, "b s d -> (b s) d"), indices).unsqueeze(0)
        seq_len = hidden_states.shape[1]
        conv_state_q = conv_state_k = conv_state_v = None
        if last_state is not None and last_state.get("conv_state", None) is not None:
            conv_state_q, conv_state_k, conv_state_v = last_state["conv_state"]
        q_in = self.q_proj(hidden_states)
        k_in = self.k_proj(hidden_states)
        v_in = self.v_proj(hidden_states)
        q_in, conv_state_q = self.q_conv1d(q_in, cache=conv_state_q, output_final_state=use_cache, cu_seqlens=cu_seqlens)
        k_in, conv_state_k = self.k_conv1d(k_in, cache=conv_state_k, output_final_state=use_cache, cu_seqlens=cu_seqlens)
        v_in, conv_state_v = self.v_conv1d(v_in, cache=conv_state_v, output_final_state=use_cache, cu_seqlens=cu_seqlens)
        q = rearrange(q_in, "b l (h d) -> b l h d", d=self.head_k_dim)
        k = rearrange(k_in, "b l (h d) -> b l h d", d=self.head_k_dim)
        v_direct = rearrange(v_in, "b l (h d) -> b l h d", d=self.head_v_dim)
        if self.qk_activation != "silu":
            if self.qk_activation == "relu":
                q, k = q.relu(), k.relu()
            elif self.qk_activation == "elu":
                q, k = elu_p1(q), elu_p1(k)
            elif self.qk_activation != "identity":
                raise NotImplementedError
        if self.qk_norm == "sum":
            q, k = sum_norm(q), sum_norm(k)
        if self.use_beta:
            beta = self.b_proj(hidden_states).sigmoid()
        else:
            beta = torch.ones_like(q[..., 0])
        if self.allow_neg_eigval:
            beta = beta * 2.0
        delta_out_t, recurrent_state = delta_rule_chunkwise(
            q=rearrange(q, "b l h d -> b h l d"),
            k=rearrange(k, "b l h d -> b h l d"),
            v=rearrange(v_direct, "b l h d -> b h l d"),
            beta=rearrange(beta, "b l h -> b h l"),
        )
        delta_out = rearrange(delta_out_t, "b h l d -> b l h d")
        local_short = self.local_fir_short(v_direct)
        local_long = self.local_fir_long(v_direct)
        stats_short = self._per_head_stats(local_short)
        stats_long = self._per_head_stats(local_long)
        stats_delta = self._per_head_stats(delta_out)
        stats_value = self._per_head_stats(v_direct)
        stats_vec = torch.cat([stats_short, stats_long, stats_delta, stats_value], dim=-1)  # (B, L, H, 16)
        hs_exp = hidden_states.unsqueeze(-2).expand(-1, -1, self.num_heads, -1)
        gate_in = torch.cat([hs_exp, stats_vec], dim=-1)
        gate_in_flat = rearrange(gate_in, "b l h d -> (b l h) d")
        gate_logits_flat = self.fusion_gate_mlp(gate_in_flat)
        temperature = F.softplus(self.logit_temperature) + 1e-4
        gate_logits_flat = gate_logits_flat / temperature
        fusion_logits = rearrange(gate_logits_flat, "(b l h) c -> b l h c", b=gate_in.shape[0], l=gate_in.shape[1], h=self.num_heads)
        fusion_weights = torch.softmax(fusion_logits, dim=-1)
        # ============= Gate entropy reg ==================
        # shape: (b,l,h,4)
        gate_entropy = -(fusion_weights * (fusion_weights.clamp(min=1e-8).log())).sum(dim=-1).mean()
        self.gate_entropy = self.gate_entropy_weight * gate_entropy
        # ============ Weighted fusion ============
        o = (
            fusion_weights[..., 0:1] * local_short
            + fusion_weights[..., 1:2] * local_long
            + fusion_weights[..., 2:3] * delta_out
            + fusion_weights[..., 3:4] * v_direct
        )
        # ========== Adaptive dynamic residual injection =============
        # Residual gate (dynamic per token, per head)
        residual_gates = self.residual_gating_mlp(hidden_states)  # shape (b,l,h)
        o = o + residual_gates.unsqueeze(-1) * local_short
        # ========== Post-fusion per-token RMSNorm ===========
        o = self.fusion_norm(o)
        # ------------- Cache update ------------
        if past_key_values is not None and self.layer_idx is not None and use_cache:
            past_key_values.update(
                recurrent_state=recurrent_state,
                conv_state=(conv_state_q, conv_state_k, conv_state_v),
                layer_idx=self.layer_idx,
                offset=seq_len,
            )
        # -------- Output Norm/Proj ------------
        if self.use_gate:
            g = rearrange(self.g_proj(hidden_states), "b l (h d) -> b l h d", d=self.head_v_dim)
            o = self.o_norm(o, g)
        else:
            o = self.o_norm(o)
        o = rearrange(o, "b l h d -> b l (h d)")
        o = self.o_proj(o)
        if attention_mask is not None:
            o = pad_input(o.squeeze(0), indices, batch_size, seq_len_full)
        return o, None, past_key_values
